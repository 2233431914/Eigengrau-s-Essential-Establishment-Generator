:: StorySettings
ifid:f7166797-ffa0-4ec8-a0b6-fbb555954c13
zoom:1


:: StoryTitle
Eigengrau's Essential Establishment Generator


:: Story Stylesheet [stylesheet]
/*body
{
  font-family: Bookinsanity;
  font-size: 18px;
  color: black;
}*/

body.output {
  background-image:
url(https://pre00.deviantart.net/3a51/th/pre/i/2015/198/a/1/phb_background_texture_by_kluckham-d91rf3o.png);
  background-attachment: scroll; 
  background-repeat: repeat;
  background-size: cover;
  font-family: Bookos;
  font-size: 18px;
  margin-bottom: 4px;
  margin-top: 4px;
  /*color: black;*/
}

h1 {
  font-family: MrJeeves;
  font-size: 37px;
  color: rgb(88, 24, 42);
;
}

h2 {
  font-family: MrJeeves;   
  font-size: 26px;
  color: #58182a;
}

h3 {
  font-family: MrJeeves;   
  font-size: 19px;
  color: #58180D;
  border-bottom: 2px solid #c9ad6a;
  display: block;
}

h4 {
  font-family: MrJeeves;   
  font-size: 17px;
  color: #58180D;
}

h5 {
  font-family: ScalySansSmallCaps;   
  font-size: 16px;
  color: black;
}

.firstcharacter {
  float: left;
  font-family: Solbera Imitation;
  font-size: 75px;
  line-height: 60px;
  padding-top: 4px;
  padding-right: 8px;
  padding-left: 3px;
}

blockquote {
    border-style: solid;
    border-width: 2px;
  	background-color: #E0E5C1;
    box-sizing: border-box;
}

descriptive {
  border-style: solid;
  font-family: ScalySans;
  border-top-width: 1px;
  border-bottom-width: 1px;
  border-left-width: 2px;
  border-right-width: 2px;
  background-color: #FAF7EA;
  box-sizing: border-box;
}

a:link { 
  color: 58180D;
} 
  
a { 
  color: 58180D;
} 

/***********************************************************************
	BLEACHED - A largely white style for SugarCube â‰¥v2.23.1
***********************************************************************/
body {
	color: #111;

}
a {
	color: #35c;
}
a:hover {
	color: #57e;
}
span.link-disabled {
	color: #777;
}
button {
	color: #111;
	background-color: #acf;
	border-color: #8ad;
}
button:hover {
	background-color: #8ad;
	border-color: #68b;
}
button:disabled {
	background-color: #ccc;
	border-color: #aaa;
}
input, select, textarea {
	color: #111;
	border-color: #ccc;
}
input:not(:disabled):focus, select:not(:disabled):focus, textarea:not(:disabled):focus,
input:not(:disabled):hover, select:not(:disabled):hover, textarea:not(:disabled):hover {
	background-color: #eee;
	border-color: #111;
}
hr {
	border-color: #111;
}

.error-view {
	background-color: #eaa;
	border-left-color: #d77;
}
.error-view > .error-source:not([hidden]) {
	background-color: rgba(255, 255, 255, 0.2);
}

#ui-bar {
	background-color: #eee;
	border-color: #ccc;
}
#ui-bar hr {
	border-color: #ccc;
}
#ui-bar-toggle,
#ui-bar-history [id|="history"] {
	color: #111;
	border-color: #ccc;
}
#ui-bar-toggle:hover,
#ui-bar-history [id|="history"]:hover {
	background-color: #ccc;
	border-color: #111;
}
#ui-bar-history [id|="history"]:disabled {
	color: #ccc;
	background-color: transparent;
	border-color: #ccc;
}
#menu ul {
	border-color: #ccc;
}
#menu li:not(:first-child) {
	border-top-color: #ccc;
}
#menu li a {
	color: #111;
}
#menu li a:hover {
	background-color: #ccc;
	border-color: #111;
}

/* Default dialog styling */
#ui-overlay {
	background-color: #777;
}
#ui-dialog-titlebar {
	background-color: #ccc;
}
#ui-dialog-close:hover {
	background-color: #b44;
	border-color: #a33;
}
#ui-dialog-body {
	background-color: #fff;
	border-color: #ccc;
}
#ui-dialog-body hr {
	background-color: #ccc;
}

/* List-based dialog styling */
#ui-dialog-body.list li:not(:first-child) {
	border-top-color: #ccc;
}
#ui-dialog-body.list li a {
	color: #111;
}
#ui-dialog-body.list li a:hover {
	background-color: #ccc;
	border-color: #111;
}

/* Saves dialog styling */
#ui-dialog-body.saves > *:not(:first-child),
#ui-dialog-body.saves tr:not(:first-child) {
	border-top-color: #ccc;
}
#ui-dialog-body.saves .empty {
	color: #777;
}

/* Settings dialog styling */
#ui-dialog-body.settings button[id|="setting-control"] {
	color: #111;
	border-color: #ccc;
}
#ui-dialog-body.settings button[id|="setting-control"]:hover {
	background-color: #eee;
	border-color: #111;
}
#ui-dialog-body.settings button[id|="setting-control"].enabled {
	background-color: #9e9;
	border-color: #7c7;
}
#ui-dialog-body.settings button[id|="setting-control"].enabled:hover {
	background-color: #7c7;
	border-color: #5a5;
}

/* Debug bar styling */
#debug-bar,
#debug-bar-watch {
	background-color: #eee;
	border-color: #ccc;
}
#debug-bar-watch div {
	color: #777;
}
#debug-bar-watch-toggle,
#debug-bar-views-toggle {
	color: #111;
	border-color: #ccc;
}
#debug-bar-watch-toggle:hover,
#debug-bar-views-toggle:hover {
	background-color: #eee;
	border-color: #111;
}
#debug-bar-watch:not([hidden]) ~ div #debug-bar-watch-toggle,
html[data-debug-view] #debug-bar-views-toggle {
	background-color: #9e9;
	border-color: #7c7;
}
#debug-bar-watch:not([hidden]) ~ div #debug-bar-watch-toggle:hover,
html[data-debug-view] #debug-bar-views-toggle:hover {
	background-color: #7c7;
	border-color: #5a5;
}

/* Debug view styling */
html:not([data-debug-view]) #debug-view-toggle {
	color: #111;
	border-color: #ccc;
}
html:not([data-debug-view]) #debug-view-toggle:hover {
	background-color: #eee;
	border-color: #111;
}
html[data-debug-view] #debug-view-toggle {
	background-color: #9e9;
	border-color: #7c7;
}
html[data-debug-view] #debug-view-toggle:hover {
	background-color: #7c7;
	border-color: #5a5;
}
html[data-debug-view] .debug {
	background-color: #dc9;
}
html[data-debug-view] .debug.hidden,
html[data-debug-view] .debug.hidden .debug {
	background-color: #bbb;
}
/*! <<numberpool>> macro set for SugarCube v2 */
div[id|="numberbox-body"] {
	display: inline-block;
}
div[id|="numberbox-body"] input {
	min-width: 3em;
	width: 3em;
	text-align: center;
   	font-color: black;
}
div[id|="numberbox-body"] button {
	font-family: "tme-fa-icons";
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
  	font-color: black;
	text-transform: none;
	line-height: normal;
	speak: none;
	padding: 0.4em 0.6em;
}
div[id|="numberbox-body"] button[id|="numberbox-minus"] {
	margin-right: 0.4em;
}
div[id|="numberbox-body"] button[id|="numberbox-plus"] {
	margin-left: 0.4em;
}

div[id|="numberslider-body"] {
	display: inline-block;
}
div[id|="numberslider-body"] span {
	display: inline-block;
	/*font-size: 1.25em;*/
	margin-left: 0.25em;
	min-width: 3em;
	text-align: center;
	vertical-align: middle;
}
div[id|="numberslider-body"] input {
	-webkit-appearance: none;
	cursor: pointer;
	height: 1.25em;
	min-width: 20em;
	vertical-align: middle;
}
div[id|="numberslider-body"] input:focus {
	outline: none;
}
div[id|="numberslider-body"] input::-webkit-slider-runnable-track {
	background: #222;
	border: 1px solid #444;
	border-radius: 0;
	cursor: pointer;
	height: 10px;
	width: 100%;
}
div[id|="numberslider-body"] input::-webkit-slider-thumb {
	-webkit-appearance: none;
	background: #35a;
	border: 1px solid #57c;
	border-radius: 0;
	cursor: pointer;
	height: 18px;
	margin-top: -5px;
	width: 33px;
}
div[id|="numberslider-body"] input:focus::-webkit-slider-runnable-track {
	background: #222;
}
div[id|="numberslider-body"] input::-moz-range-track {
	background: #222;
	border: 1px solid #444;
	border-radius: 0;
	cursor: pointer;
	height: 10px;
	width: 100%;
}
div[id|="numberslider-body"] input::-moz-range-thumb {
	background: #35a;
	border: 1px solid #57c;
	border-radius: 0;
	cursor: pointer;
	height: 18px;
	width: 33px;
}
div[id|="numberslider-body"] input::-ms-track {
	background: transparent;
	border-color: transparent;
	color: transparent;
	cursor: pointer;
	height: 10px;
	width: 99%; /* fallback for MS browsers without support for calc() */
	width: calc(100% - 1px);
}
div[id|="numberslider-body"] input::-ms-fill-lower {
	background: #222;
	border: 1px solid #444;
	border-radius: 0;
}
div[id|="numberslider-body"] input::-ms-fill-upper {
	background: #222;
	border: 1px solid #444;
	border-radius: 0;
}
div[id|="numberslider-body"] input::-ms-thumb {
	background: #35a;
	border: 1px solid #57c;
	border-radius: 0;
	cursor: pointer;
	height: 16px;
	width: 33px;
}

/*! <<bugreport>> macro for SugarCube v2 */
#ui-dialog-body.bugreport #bugreport-info {
	margin-bottom: 1em;
}
#ui-dialog-body.bugreport #bugreport-data {
	background-color: #eee;
	border: 1px solid #111;
	display: block;
	margin: 0;
	padding: 0;
}
#ui-dialog-body.bugreport #bugreport-data > code {
	display: block;
	font-family: monospace, monospace;
	height: auto;
	margin: 0;
	min-height: 200px;
	overflow: auto;
	padding: 0.5em;
	white-space: pre-wrap;
}


/*! <<checkvars>> macro for SugarCube 2.x */
#ui-dialog-body.checkvars{padding:1em}#ui-dialog-body.checkvars h1{font-size:1.5em;margin-top:0}#ui-dialog-body.checkvars table{border-collapse:collapse;border-spacing:0}#ui-dialog-body.checkvars thead tr{border-bottom:2px solid #ccc}#ui-dialog-body.checkvars tr:not(:first-child){border-top:1px solid #ccc}#ui-dialog-body.checkvars td,#ui-dialog-body.checkvars th{padding:.25em 1em}#ui-dialog-body.checkvars td:first-child,#ui-dialog-body.checkvars th:first-child{padding-left:.5em;border-right:1px solid #ccc}#ui-dialog-body.checkvars td:last-child,#ui-dialog-body.checkvars th:last-child{padding-right:.5em}#ui-dialog-body.checkvars th:first-child{text-align:center}#ui-dialog-body.checkvars td:first-child{font-weight:700;text-align:right}#ui-dialog-body.checkvars td{font-family:monospace,monospace;vertical-align:top;white-space:pre-wrap}#ui-dialog-body.checkvars .scroll-pad{margin:0;padding:0}

/*body {
  font-family: Bookos;
  font-size: 18px;
  font-color: black;
}
h1 {
    color: black;
}
body.output {
  background-image:
url(https://pre00.deviantart.net/3a51/th/pre/i/2015/198/a/1/phb_background_texture_by_kluckham-d91rf3o.png);
  background-attachment: fixed; 
  background-repeat: repeat;
  background-size: cover;
  background-color: white;
  font-family: Bookos;
  font-size: 18px;
  font-color: black;
}

p {
    border: 1px solid black;
    outline-style: solid;
    outline-color: black;
}
*/


:: Story JavaScript [script]
/*! <<numberpool>> macro set for SugarCube v2 */
!function(){"use strict";if("undefined"==typeof version||"undefined"==typeof version.title||"SugarCube"!==version.title||"undefined"==typeof version.major||version.major<2||"undefined"==typeof version.minor||version.minor<5)throw new Error("<<numberpool>> macro set requires SugarCube 2.5.0 or greater, aborting load");Macro.add("numberbox",{handler:function(){function validateAndApply(el,addend){var curValue=Math.trunc(Wikifier.getValue(varName)),newValue=Math.trunc(el.value),newPoolValue=null;if(Number.isNaN(newValue)||!Number.isFinite(newValue))return el.value=curValue,!1;if(null!=addend&&(newValue+=addend),newValue<minValue?newValue=minValue:newValue>maxValue&&(newValue=maxValue),null!==pool){var poolValue=pool.get(),delta=(newValue-curValue)*poolCost;delta<0?newPoolValue=poolValue-delta:delta>0&&poolValue>=poolCost?(poolValue<delta&&(newValue=curValue+Math.trunc(poolValue/poolCost),delta=poolValue-poolValue%poolCost),newPoolValue=poolValue-delta):newValue=curValue}return Wikifier.setValue(varName,newValue),el.value=newValue,null!==newPoolValue&&pool.set(newPoolValue),!0}var _this=this;if(this.args.length<4){var errors=[];return this.args.length<1&&errors.push("variable name"),this.args.length<2&&errors.push("default value"),this.args.length<3&&errors.push("min value"),this.args.length<4&&errors.push("max value"),this.error("no "+errors.join(" or ")+" specified")}if("string"!=typeof this.args[0])return this.error("variable name argument is not a string");var varName=this.args[0].trim();if("$"!==varName[0]&&"_"!==varName[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var varId=Util.slugify(varName),defValue=Number(this.args[1]),minValue=Number(this.args[2]),maxValue=Number(this.args[3]),poolCost=1,autofocus=!1;if(this.args.length>5?(poolCost=Number(this.args[4]),autofocus="autofocus"===this.args[5]):this.args.length>4&&("autofocus"===this.args[4]?autofocus=!0:poolCost=Number(this.args[4])),Number.isNaN(defValue)||!Number.isFinite(defValue)||Math.trunc(defValue)!==defValue)return this.error("default value ("+this.args[1]+") is not a whole number");if(Number.isNaN(minValue)||!Number.isFinite(minValue)||Math.trunc(minValue)!==minValue)return this.error("min value ("+this.args[2]+") is not a whole number");if(Number.isNaN(maxValue)||!Number.isFinite(maxValue)||Math.trunc(maxValue)!==maxValue)return this.error("max value ("+this.args[3]+") is not a whole number");if(Number.isNaN(poolCost)||!Number.isFinite(poolCost)||Math.trunc(poolCost)!==poolCost||poolCost<=0)return this.error("pool cost ("+this.args[4]+") is not a whole number greater than zero");if(defValue<minValue)return this.error("default value ("+this.args[1]+") is less than min value ("+this.args[2]+")");if(defValue>maxValue)return this.error("default value ("+this.args[1]+") is greater than max value ("+this.args[3]+")");var pool=function(){var parent=_this.contextSelect(function(ctx){return"numberpool"===ctx.name});return null!==parent&&parent.hasOwnProperty("pool")?parent.pool:null}();Config.debug&&this.debugView.modes({block:!0});var $elControl=jQuery(document.createElement("div")),$elInput=jQuery(document.createElement("input"));$elControl.attr("id",this.name+"-body-"+varId).addClass("macro-"+this.name).appendTo(this.output),jQuery(document.createElement("button")).attr({id:this.name+"-minus-"+varId,tabindex:0}).text("").on("click",function(){return validateAndApply($elInput[0],-1)}).appendTo($elControl),$elInput.attr({id:this.name+"-input-"+varId,name:this.name+"-input-"+varId,type:"text",pattern:"\\d+",tabindex:0}).on("change",function(){validateAndApply(this)}).on("keypress",function(ev){13===ev.which&&(ev.preventDefault(),$elInput.trigger("change"))}).appendTo($elControl),jQuery(document.createElement("button")).attr({id:this.name+"-plus-"+varId,tabindex:0}).text("").on("click",function(){return validateAndApply($elInput[0],1)}).appendTo($elControl),$elInput.val(defValue),validateAndApply($elInput[0]),autofocus&&($elInput.attr("autofocus","autofocus"),postdisplay["#autofocus:"+$elInput.attr("id")]=function(task){delete postdisplay[task],setTimeout(function(){return $elInput.focus()},Engine.minDomActionDelay)})}}),Macro.add("numberpool",{tags:["onchange"],handler:function(){if(0===this.args.length)return this.error("no variable name specified");if(this.payload.length>2)return this.error("multiple <<onchange>> sections specified");if("string"!=typeof this.args[0])return this.error("variable name argument is not a string");var varName=this.args[0].trim();if("$"!==varName[0]&&"_"!==varName[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var curValue=Wikifier.getValue(varName);if("number"!=typeof curValue||Number.isNaN(curValue)||!Number.isFinite(curValue))return this.error("pool value is not a number");var varId=Util.slugify(varName);TempState.hasOwnProperty(this.name)||(TempState[this.name]={}),TempState[this.name].hasOwnProperty(varId)||(TempState[this.name][varId]=0),Object.defineProperty(this,"pool",{value:Object.defineProperties({},{get:{value:function(){return Wikifier.getValue(varName)}},set:{value:function(content){return function(value){var curValue=Wikifier.getValue(varName);value!==curValue&&(Wikifier.setValue(varName,value),content&&new Wikifier(null,content))}}(this.payload.length>1?this.payload[1].contents.trim():"")}})}),jQuery(document.createElement("div")).attr("id",this.name+"-"+varId+"-"+TempState[this.name][varId]++).addClass("macro-"+this.name).wiki(this.payload[0].contents.replace(/^\n/,"")).appendTo(this.output)}}),Macro.add("numberslider",{handler:function(){function stepValidate(value){if(fracDigits>0){var ma=Number(minValue+"e"+fracDigits),sa=Number(stepValue+"e"+fracDigits),_va=Number(value+"e"+fracDigits)-ma;return Number(_va-_va%sa+ma+"e-"+fracDigits)}var va=value-minValue;return va-va%stepValue+minValue}function validateAndApply(el){var curValue=Wikifier.getValue(varName),newValue=Number(el.value),newPoolValue=null;if(Number.isNaN(newValue)||!Number.isFinite(newValue))return el.value=curValue,!1;if(newValue=stepValidate(newValue),newValue<minValue?newValue=minValue:newValue>maxValue&&(newValue=maxValue),null!==pool)if(fracDigits>0){var pa=Number(pool.get()+"e"+fracDigits),ca=Number(curValue+"e"+fracDigits),na=Number(newValue+"e"+fracDigits),delta=na-ca;pa<delta&&(na-=delta-pa,delta=na-ca,newValue=Number(na+"e-"+fracDigits)),newPoolValue=Number(pa-delta+"e-"+fracDigits)}else{var poolValue=pool.get(),_delta=newValue-curValue;poolValue<_delta&&(newValue-=_delta-poolValue,_delta=newValue-curValue),newPoolValue=poolValue-_delta}return Wikifier.setValue(varName,newValue),el.value=newValue,null!==newPoolValue&&pool.set(newPoolValue),!0}var _this2=this;if(this.args.length<5){var errors=[];return this.args.length<1&&errors.push("variable name"),this.args.length<2&&errors.push("default value"),this.args.length<3&&errors.push("min value"),this.args.length<4&&errors.push("max value"),this.args.length<5&&errors.push("step value"),this.error("no "+errors.join(" or ")+" specified")}if("string"!=typeof this.args[0])return this.error("variable name argument is not a string");var varName=this.args[0].trim();if("$"!==varName[0]&&"_"!==varName[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var varId=Util.slugify(varName),defValue=Number(this.args[1]),minValue=Number(this.args[2]),maxValue=Number(this.args[3]),stepValue=Number(this.args[4]),autofocus=this.args.length>5&&"autofocus"===this.args[5];if(Number.isNaN(defValue)||!Number.isFinite(defValue))return this.error("default value ("+this.args[1]+") is not a number");if(Number.isNaN(minValue)||!Number.isFinite(minValue))return this.error("min value ("+this.args[2]+") is not a number");if(Number.isNaN(maxValue)||!Number.isFinite(maxValue))return this.error("max value ("+this.args[3]+") is not a number");if(Number.isNaN(stepValue)||!Number.isFinite(stepValue)||stepValue<=0)return this.error("step value ("+this.args[4]+") is not a number greater than zero");if(defValue<minValue)return this.error("default value ("+this.args[1]+") is less than min value ("+this.args[2]+")");if(defValue>maxValue)return this.error("default value ("+this.args[1]+") is greater than max value ("+this.args[3]+")");var fracDigits=function(){var str=String(stepValue),pos=str.lastIndexOf(".");return pos===-1?0:str.length-pos-1}();if(stepValidate(maxValue)!==maxValue)return this.error("max value ("+this.args[3]+") is not a multiple of the step value ("+this.args[4]+") plus the min value ("+this.args[2]+")");var pool=function(){var parent=_this2.contextSelect(function(ctx){return"numberpool"===ctx.name});return null!==parent&&parent.hasOwnProperty("pool")?parent.pool:null}();Config.debug&&this.debugView.modes({block:!0});var $elControl=jQuery(document.createElement("div")),$elInput=jQuery(document.createElement("input")),$elValue=void 0,showValue=void 0;$elControl.attr("id",this.name+"-body-"+varId).addClass("macro-"+this.name).appendTo(this.output),$elInput.attr({id:this.name+"-input-"+varId,name:this.name+"-input-"+varId,type:"range",min:minValue,max:maxValue,step:stepValue,tabindex:0}).on("change input."+Util.slugify(this.name),function(){validateAndApply(this),"function"==typeof showValue&&showValue()}).on("keypress",function(ev){13===ev.which&&(ev.preventDefault(),$elInput.trigger("change"))}).appendTo($elControl),!Browser.isIE||Browser.ieVersion>9?($elValue=jQuery(document.createElement("span")).attr("id",this.name+"-value-"+varId).appendTo($elControl),showValue=function(){$elValue.text(Number($elInput.val()).toFixed(fracDigits))}):$elInput.off("input."+Util.slugify(this.name)),$elInput.val(defValue),validateAndApply($elInput[0]),"function"==typeof showValue&&showValue(),autofocus&&($elInput.attr("autofocus","autofocus"),postdisplay["#autofocus:"+$elInput.attr("id")]=function(task){delete postdisplay[task],setTimeout(function(){return $elInput.focus()},Engine.minDomActionDelay)})}})}();


/*! <<bugreport>> macro for SugarCube v2 */
!function(){"use strict";if("undefined"==typeof version||"undefined"==typeof version.title||"SugarCube"!==version.title||"undefined"==typeof version.major||version.major<2||"undefined"==typeof version.minor||version.minor<19)throw new Error("<<bugreport>> macro requires SugarCube 2.19.0 or greater, aborting load");Macro.add("bugreport",{fence:["[spoiler][code]","[/code][/spoiler]"],handler:function(){function serializeVariables(varObj,diffObj,doSort){function renderDiff(diff,orig){for(var keys=Object.keys(diff||{}),render=orig?clone(orig):{},i=0,klen=keys.length;i<klen;++i){var key=keys[i],diffP=diff[key];if(diffP===Diff.Op.Delete)delete render[key];else if(Array.isArray(diffP))switch(diffP[0]){case Diff.Op.SpliceArray:try{render.splice(diffP[1],1+(diffP[2]-diffP[1]))}catch(ex){}break;case Diff.Op.Copy:render[key]=clone(diffP[1]);break;case Diff.Op.CopyDate:render[key]=new Date(diffP[1])}else{var recurse=renderDiff(diffP,render[key]);0!==Object.keys(recurse).length&&(render[key]=recurse)}}return render}var varList=[],diff=renderDiff(Diff.diff(varObj,diffObj));for(var key in diff){var sName="$"+(key.search(/[^\w]/)===-1?key:'"'+key+'"');varList.push(sName+"="+JSON.stringify(diff[key]))}return doSort&&("function"==typeof doSort?varList.sort(doSort):varList.sort()),0!==varList.length?varList.join(", "):""}var info=this.args.length>0&&Story.has(this.args[0])?Story.get(this.args[0]).processText():"",last=State.length-1,passages=[],source=unescape(window.location),srcMatch=void 0;null!==(srcMatch=/\/([^\/]+)$/.exec(source))&&(source=srcMatch[1]);for(var i=0;i<=last;++i)passages.push('"'+State.index(i).title+'"');passages=passages.join(", ");var varsPre=serializeVariables(State.index(0).variables,State.index(last).variables),varsPost=serializeVariables(State.index(last).variables,State.variables),$dialog=jQuery(Dialog.setup("Bug Report","bugreport"));$dialog.append((info?'<div id="bugreport-info"></div>':"")+'<div><b>Bug report:</b> <a id="bugreport-data-select" class="link-internal macro-bugreport">[Select]</a></div><pre id="bugreport-data"><code tabindex="0"></code></pre>'),info&&new Wikifier($dialog.find("#bugreport-info"),info);var $data=jQuery($dialog.find("#bugreport-data > code").get(0));$data.text(this.self.fence[0]+"\n"+("SOURCE: "+source+"\n\n")+("PASSAGES:\n"+passages+"\n\n")+("VARIABLES (PRE-EXECUTION):\n"+(varsPre?varsPre+"\n":"")+"\n")+("VARIABLES (POST-EXECUTION):\n"+(varsPost?varsPost+"\n":""))+(""+this.self.fence[1])),$dialog.find("#bugreport-data-select").ariaClick(function(selectData){return function(){$data.focus(),selectData($data.get(0))}}(this.self.selectData)),Dialog.open()},selectData:function(el){var getSelection=window.getSelection||document.getSelection;if(getSelection){var sel=getSelection();if(sel.setBaseAndExtent)sel.setBaseAndExtent(el,0,el,el.childNodes.length);else{var rng=document.createRange();rng.selectNodeContents(el),sel.removeAllRanges(),sel.addRange(rng)}}else if(document.selection){var _rng=document.body.createTextRange();_rng.moveToElementText(el),_rng.select()}}})}();


/*! <<checkvars>> macro for SugarCube 2.x */
!function(){"use strict";if("undefined"==typeof version||"undefined"==typeof version.title||"SugarCube"!==version.title||"undefined"==typeof version.major||version.major<2)throw new Error("<<checkvars>> macro requires SugarCube 2.0 or greater, aborting load");Macro.add("checkvars",{handler:function(){function toString(value,indent){var baseType=typeof value;switch(baseType){case"number":return isNaN(value)?"NaN":isFinite(value)?String(value):"Infinity";case"string":return JSON.stringify(value);case"function":return"(function)";default:if("object"!==baseType||null==value)return String(value);var objType=Object.prototype.toString.call(value);if("[object Date]"===objType)return'(object: Date, value: "'+value.toISOString()+'")';if("[object RegExp]"===objType)return"(object: RegExp, value: "+value.toString()+")";var opener,closer,result=[],indentText="Â Â ";return indent||(indent=""),("[object Set]"===objType||value instanceof Set)&&(value=Array.from(value)),Array.isArray(value)?(opener="[\n",closer="\n"+indent+"]",value.forEach(function(p,i){result.push(indent+indentText+i+" â‡’ "+toString(value[i],indent+indentText))}),Object.keys(value).forEach(function(p){/^\d+$/.test(p)||result.push(indent+indentText+toString(p)+" â‡’ "+toString(value[p],indent+indentText))})):"[object Map]"===objType||value instanceof Map?(opener="{\n",closer="\n"+indent+"}",Array.from(value).map(function(kv){result.push(indent+indentText+toString(kv[0],indent+indentText)+" â‡’ "+toString(kv[1],indent+indentText))})):(opener="{\n",closer="\n"+indent+"}",Object.keys(value).forEach(function(p){result.push(indent+indentText+toString(p)+" â‡’ "+toString(value[p],indent+indentText))})),opener+result.join(",\n")+closer}}var dialog,sv=State.variables,names=Object.keys(sv);if(dialog=UI.setup("Story $variables","checkvars"),0===names.length)return dialog.innerHTML="<h1>Story $variables (<code>State.variables</code>):</h1><p><em>No $variables currently setâ€¦</em></p>",void UI.open();dialog.innerHTML="<h1>Story $variables (<code>State.variables</code>):</h1><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody></tbody></table>"+(/applewebkit|chrome/.test(Browser.userAgent)?"":'<div class="scroll-pad">&nbsp;</div>');var tbody=dialog.querySelector("tbody");names.sort(function(a,b){return Util.isNumeric(a)&&Util.isNumeric(b)?Number(a)-Number(b):a.localeCompare(b)});for(var i=0;i<names.length;i++){var tr=document.createElement("tr"),tdName=document.createElement("td"),tdValue=document.createElement("td");tdName.textContent="$"+names[i],tdValue.textContent=toString(sv[names[i]]),tr.appendChild(tdName),tr.appendChild(tdValue),tbody.appendChild(tr)}UI.open()}})}();


:: Creation [output]
<span class="firstcharacter">W</span>elcome to Eigengrau's Essential Establishment Generator, v$versionnumber! This is still in alpha. If you have any bug reports, suggestions, or submissions (in desperate need of more plot hooks!), please click here: [[Submission Form]]
<<nobr>><<linkappend "<h4>Changelog</h4>" t8n>>
<<include "Changelog">><<linkappend "<h5>To Do List</h5>" t8n>>
<<include "ToDo">><</linkappend>><</linkappend>>

<<linkreplace "Rename the $town.type <strong>$town.name</strong>">><<textbox "$town.name" $town.name>><</linkreplace>><</nobr>>
<<linkreplace "Rename <strong>$tavern.name</strong>">><h3><<textbox "$tavern.name" $tavern.name>></h3><</linkreplace>>

Tavern Wealth: <<numberslider "$tavern.wealthroll" $tavern.wealthroll 1 100 1>>

Tavern Population: <<numberslider "$tavern.populationroll" $tavern.populationroll 1 100 1>>

Tavern Size: <<numberslider "$tavern.sizeroll" $tavern.sizeroll 1 100 1>>

Tavern Reputation: <<numberslider "$tavern.reputationroll" $tavern.reputationroll 1 100 1>>

Tavern Roughness: <<numberslider "$tavern.roughnessroll" $tavern.roughnessroll 1 100 1>>

Tavern Sin: <<numberslider "$tavern.sinroll" $tavern.sinroll 1 100 1>>

Tavern Cleanliness: <<numberslider "$tavern.cleanlinessroll" $tavern.cleanlinessroll 1 100 1>>


When you're ready, here's the <<nobr>><<set _output to random(1, 3)>>
	<<switch _output>>
	<<case 1>>
		[[output|Output1]]
	<<case 2>>
		[[output|Output2]] 
	<<case 3>>
		[[output|Output3]] 
	<</switch>>
<</nobr>>


:: StoryInit
<<set $versionnumber to "0.3">>

<<include "Town">>

<<include "Tavern">>

<<include "TavernNameGen">>

<<include "TavernFlavour">>

<<include "Names">>

<<include "MathClamp">>

/*<<include "fairmath">>*/

<<include "Modifiers">>

<<include "Cloner">>

<<include "NPC">>

<<include "Bartender">>

<<include "PlotGuy">>

<<include "PlotHook">>

<<include "ShitPlotHooks">>

<<include "SpecialBrew">>

<<include "Bonds">>

<<include "Renders">>

<<include "Pickpocket">>

<<include "Potions">>

<<include "AlchemistInventory">>

<<include "Blacksmith">>

<<include "Smithy">>

<<include "SmithyModifiers">>

<<include "SmithyRenders">>

<<include "SmithyNameGen">>


math.clamp($tavern.sinroll, 1, 100)
math.clamp($tavern.wealthroll, 1, 100)
math.clamp($tavern.reputationroll, 1, 100)
math.clamp($tavern.cleanlinessroll, 1, 100)
math.clamp($tavern.populationroll, 1, 100)
math.clamp($tavern.roughnessroll, 1, 100)
math.clamp($tavern.diversityroll, 1, 100)
math.clamp($tavern.sizeroll, 1, 100)
math.clamp($tavern.magicroll, 1, 100)

<<if $tavern.sinroll gt 100>>
		<<set $tavern.sinroll to 100>>
	<<elseif $tavern.sinroll lt 1>>
		<<set $tavern.sinroll to 1>>
<</if>>

<<if $tavern.wealthroll gt 100>>
		<<set $tavern.wealthroll to 100>>
	<<elseif $tavern.wealthroll lt 1>>
		<<set $tavern.wealthroll to 1>>
<</if>>

<<if $tavern.reputationroll gt 100>>
		<<set $tavern.reputationroll to 100>>
	<<elseif $tavern.reputationroll lt 1>>
		<<set $tavern.reputationroll to 1>>
<</if>>

<<if $tavern.cleanlinessroll gt 100>>
		<<set $tavern.cleanlinessroll to 100>>
	<<elseif $tavern.cleanlinessroll lt 1>>
		<<set $tavern.cleanlinessroll to 1>>
<</if>>

<<if $tavern.populationroll gt 100>>
		<<set $tavern.populationroll to 100>>
	<<elseif $tavern.populationroll lt 1>>
		<<set $tavern.populationroll to 1>>
<</if>>

<<if $tavern.roughnessroll gt 100>>
		<<set $tavern.roughnessroll to 100>>
	<<elseif $tavern.roughnessroll lt 1>>
		<<set $tavern.roughnessroll to 1>>
<</if>>

<<if $tavern.diversityroll gt 100>>
		<<set $tavern.diversityroll to 100>>
	<<elseif $tavern.diversityroll lt 1>>
		<<set $tavern.diversityroll to 1>>
<</if>>

<<if $tavern.sizeroll gt 100>>
		<<set $tavern.sizeroll to 100>>
	<<elseif $tavern.sizeroll lt 1>>
		<<set $tavern.sizeroll to 1>>
<</if>>

<<if $tavern.magicroll gt 100>>
		<<set $tavern.magicroll to 100>>
	<<elseif $tavern.magicroll lt 1>>
		<<set $tavern.magicroll to 1>>
<</if>>


:: StoryAuthor
Created by /u/rcgy


:: Output1 [output]
<<nobr>><<include "Renders">><</nobr>><span class="firstcharacter">T</span>he $tavern.wordnoun is called <strong>$tavern.name</strong><<nobr>>,<</nobr>> and is <<include "ReputationDescriptor">><<nobr>>
<<if $tavern.type is "regular">>
		<<print "in $town.name for the cheap beer and its $tavern.sin patrons.">>
	<<elseif $tavern.type isnot "regular">>
		<<print "in $town.name for being a $tavern.type, with $tavern.sin patrons. Its main draw in the $town.type is the $tavern.draw<<nobr>>.<</nobr>>">>
<</if>>

<<include "TavernDescription">><</nobr>>

<h3>The Bar</h3><<nobr>>

<</nobr>>Behind $tavern.name's $tavern.structure bar is a $bartender.racenote, who you notice has $bartender.physicaltrait. Currently, $bartender.heshe is <<print $bartender.idle.random()>>. Looking up, $bartender.heshe <<print $bartender.greeting.pluck()>> and introduces <<nobr>>$bartender.himher<</nobr>>self as $bartender.firstname<<nobr>><</nobr>> $bartender.lastname<<nobr>>,<</nobr>> $bartender.hisher $bartender.eyes eyes <<print either("looking brightly at you.", "piercing through your armour.", "staring at you warily.", "watching you suspiciously.", "looking at you kindly.", "darting back and forth around the room.")>><<nobr>>
<<linkreplace "<h4>Talk with $bartender.name</h4>" t8n>><h3>$bartender.name</h3><<include "BartenderTalk">><</linkreplace>><</nobr>><<include "Menu">>
<h3>The Tavern</h3><<linkreplace "<h4>Look around the $tavern.wordnoun</h4>" t8n>><<include "LookAround">><<print $tavern.patrons.pluck()>><</linkreplace>><<print $tavern.entertainment.pluck()>>
<<include "Intrigue">><<include "Rooms">>


:: Credits [output]
Many thanks to /u/FamousHippopotamus and /u/OrkishBlade for their excellent tables and DMing advice over the years. Shoutout to /r/twinegames and the good folks in the Discord server who helped a total newb learn how to code in Twine.

This software is provided on an as-is basis, and no warranty or guarantee that it works is provided. This software will always be free, without any ads or for any pay. If you have purchased this software, seek a refund immediately.

This is still in alpha. If you have any bug reports, suggestions, or submissions (in desperate need of more plot hooks!), please click here: [[Submission Form]]

We have a subreddit! www.reddit.com/r/EigengrausGenerator

<strong>Version: $versionnumber</strong>

<<linkappend "Changelog:">>
<<include "Changelog">><</linkappend>>

The following user's content appears in this instance (i.e. only the content that is currently running is visible in the list below:

$specialbrew.author

<<linkappend "To Do List">>
<<include "ToDo">><</linkappend>>


:: TavernNameGen
/* ------------------------- TOWN NAME -------------------------- */

<<set $town.nameprefix to either("Green", "Elms", "Oak", "Fair", "Farren", "Tall", "Nar", "Alla", "Lans", "San", "Col", "Fri", "Plain", "Hon", "Far", "Barrow", "Shi", "Mel", "Mal", "Bon", "Bie", "Can", "Pol", "Pan", "Fald", "Frior", "Pol")>>

<<set $town.namesuffix to either("dale", "ten", "den", "ven", "gen", "len", "lun", "stun", "ville", "burn", "view", "nen", "lan", "sed", "folk", "ork", "len", "pan", "rel", "old", "ten", "tan", "lend", "vorn", "vant", "lid", "lin")>>

<<set $town.name to $town.nameprefix + $town.namesuffix>>




/* ------------------------- TAVERN NAME -------------------------- */
<<set _tavernnameroll to random(1, 5)>>

<<set $tavern.nounA to either("Warhorse", "Horseman", "Maiden", "Mage", "Bachelor", "King", "Magistrate", "Warchief", "Warrior", "Mare", "Wolf", "Fox", "Lion", "Lamb", "Warden", "Mule", "Assassin", "Swordsman", "Lady", "Knight", "Soldier", "Wizard", "Warlock", "Ranger", "Bard", "Druid", "Monk", "Paladin", "Sorcerer", "Rogue", "Cleric", "Bear", "Goblin", "Kobold", "Gnome", "Halfling", "Dwarf", "Fool", "Virgin", "Horde", "Squire", "Eagle", "Rooster", "Piglet", "Thief", "Priest", "Friar", "Blacksmith", "Guard", "Stag", "Hag", "Devil", "Angel", "Serpent", "Snake", "Rat", "Mouse", "Bandit", "Chieftain", "Griffon", "Dragon", "Lizard", "Pony", "Baron", "Heifer", "Bull", "Hound", "Goat", "Toad", "Stallion", "Monster", "Vermin", "Beholder", "Monkey", "Elephant", "Boar", "Beagle", "Bat", "Demon", "Imp", "Sprite", "Fey", "Spirit", "Bitch", "Starling", "Minotaur", "Barbarian", "Prophet", "Merchant", "Cobbler", "Unicorn", "Ogre", "Nymph", "Butcher", "Captain", "Angler", "Lover", "Mason", "Tinker", "Whale")>> 

<<if _tavernnameroll is 1>>
	<<set $tavern.adjective to either("Wayward", "Quiet", "Jolly", "Good", "Crooked", "White", "Gray", "Blackened", "Harried", "Crimson", "Silver", "Golden", "Disturbed", "Filthy", "Ugly", "Bastard", "Faltering", "Glorious", "Beautiful", "Handsome", "Wrinkled", "Unhappy", "Intelligent", "Lovely", "Ignorant", "Senile", "Sour", "Sweet", "Lonely", "Green", "Blind", "Hungry", "Worried", "Educated", "Stupid", "Emboldened", "Honorary", "Stinky", "Bottomless", "Greasy", "Sloppy", "Stylish", "Distressed", "Harrowed", "Tormented", "Mortified", "Lopsided", "Broken", "Moldy", "Gooey", "Fermented", "Blighted", "Ornate", "Drowned", "Murdered", "Widowed", "Hanged", "Angry", "Lusty", "Haunted", "Strong", "Withered", "Comely", "Pious", "Penitent", "Patient", "Drunk", "Worthy", "Wealthy", "Loathsome", "Weak", "Miniscule", "Miniature", "Enormous", "Enlarged", "Engorged", "Lecherous", "Despicable", "Lewd", "Portly", "Violent", "Bumbling", "Faulty", "Pristine", "Cleanly", "Cracked", "Splintered", "Jeweled", "Superior", "Flawless", "Common", "Exquisite", "Elegant", "Fine", "Dull", "Brittle", "Fragile", "Effeminate", "Masculine", "Supine")>>
<<elseif _tavernnameroll is 2 or _tavernnameroll is 3>>
	<<set $tavern.nounB to either("Mount", "Saddle", "Guild", "Fangs", "Man", "Pardon", "Pleasure", "Belt", "Staff", "Shield", "Prince", "Master", "Servant", "Meal", "Prince", "Favor", "Love", "Word", "Scribe", "Apprentice", "Acolyte", "Dress", "Goddess", "God", "Gold", "Purse", "Trap", "King", "Son", "Sister", "Mother", "Daughter", "Cry", "Shout", "Cupboard", "Pantry", "Queen", "Wealth", "Star", "Void", "Woman", "Man", "Whore", "Butcher", "Anvil", "Tome", "Sacrifice","Armor", "Cup", "Pot", "Stove", "Stool", "Princess", "Chain", "Sword", "Pork", "Grain", "Tooth", "Lance", "Axe", "Scabbard", "Knife", "Dagger", "Spear", "Bow", "Crossbow", "Quarterstaff", "Staff", "Fire", "Ice", "Wind", "Earth", "Water", "Stone", "Ladle", "Monastery", "Chalice", "Goblet", "Dungeon", "Lust", "Lantern", "Bone", "Life", "Stone", "Mistress", "Mind", "Treasure", "Barter", "Armorer", "Butler", "Page", "Tome", "Feather", "Shadow", "Friend", "Labyrinth", "Mountain", "Hope", "Boot", "Gauntlet")>>
<<elseif _tavernnameroll is 4>>
	<<set $tavern.verb to either("Moping", "Drowning", "Hanging", "Belching", "Running", "Walking", "Hunting", "Fighting", "Swinging", "Breaking", "Working", "Fermenting", "Flowering", "Worrying", "Following", "Flowing", "Complaining", "Standing", "Joking", "Laughing", "Panting", "Boarding", "Lounging", "Cutting", "Singing", "Staring", "Goading", "Disappointing", "Faltering", "Binding", "Winding", "Sundering", "Longing", "Fumbling", "Bumbling", "Stumbling", "Pining", "Whining", "Flying", "Hoarding", "Whoring", "Warring", "Winking", "Skittering", "Slithering", "Snoring", "Snorting", "Playing", "Practicing", "Grappling", "Burning", "Flaming", "Freezing", "Poisoning", "Burying", "Throwing", "Sparking", "Steaming", "Smiting", "Chittering", "Chattering", "Mumbling", "Grating", "Plowing", "Biting", "Howling", "Roaring", "Shouting", "Pouring", "Squeaking", "Stinging", "Charging", "Bleating", "Stabbing", "Goring", "Poking", "Swallowing", "Sucking", "Drinking", "Sneaking", "Hiding", "Slashing", "Limping", "Tripping", "Shifting", "Sliding", "Blinding", "Piercing", "Bludgeoning", "Crushing", "Hopping", "Thundering", "Hushing", "Crying", "Wailing", "Mourning", "Darkening", "Piling", "Digging", "Flinging")>>
<<elseif _tavernnameroll is 5>>
	<<set $tavern.nounC to either("Mount", "Saddle", "Guild", "Fangs", "Man", "Pardon", "Pleasure", "Belt", "Staff", "Shield", "Prince", "Master", "Servant", "Meal", "Prince", "Favor", "Love", "Word", "Scribe", "Apprentice", "Acolyte", "Dress", "Goddess", "God", "Gold", "Purse", "Trap", "King", "Son", "Sister", "Mother", "Daughter", "Cry", "Shout", "Cupboard", "Pantry", "Queen", "Wealth", "Star", "Void", "Woman", "Man", "Whore", "Butcher", "Anvil", "Tome", "Sacrifice","Armor", "Cup", "Pot", "Stove", "Stool", "Princess", "Chain", "Sword", "Pork", "Grain", "Tooth", "Lance", "Axe", "Scabbard", "Knife", "Dagger", "Spear", "Bow", "Crossbow", "Quarterstaff", "Staff", "Fire", "Ice", "Wind", "Earth", "Water", "Stone", "Ladle", "Monastery", "Chalice", "Goblet", "Dungeon", "Lust", "Lantern", "Bone", "Life", "Stone", "Mistress", "Mind", "Treasure", "Barter", "Armorer", "Butler", "Page", "Tome", "Feather", "Shadow", "Friend", "Labyrinth", "Mountain", "Hope", "Boot", "Gauntlet"), $tavern.verb to either("Moping", "Drowning", "Hanging", "Belching", "Running", "Walking", "Hunting", "Fighting", "Swinging", "Breaking", "Working", "Fermenting", "Flowering", "Worrying", "Following", "Flowing", "Complaining", "Standing", "Joking", "Laughing", "Panting", "Boarding", "Lounging", "Cutting", "Singing", "Staring", "Goading", "Disappointing", "Faltering", "Binding", "Winding", "Sundering", "Longing", "Fumbling", "Bumbling", "Stumbling", "Pining", "Whining", "Flying", "Hoarding", "Whoring", "Warring", "Winking", "Skittering", "Slithering", "Snoring", "Snorting", "Playing", "Practicing", "Grappling", "Burning", "Flaming", "Freezing", "Poisoning", "Burying", "Throwing", "Sparking", "Steaming", "Smiting", "Chittering", "Chattering", "Mumbling", "Grating", "Plowing", "Biting", "Howling", "Roaring", "Shouting", "Pouring", "Squeaking", "Stinging", "Charging", "Bleating", "Stabbing", "Goring", "Poking", "Swallowing", "Sucking", "Drinking", "Sneaking", "Hiding", "Slashing", "Limping", "Tripping", "Shifting", "Sliding", "Blinding", "Piercing", "Bludgeoning", "Crushing", "Hopping", "Thundering", "Hushing", "Crying", "Wailing", "Mourning", "Darkening", "Piling", "Digging", "Flinging")>>
<</if>>

/* ---------------------- TAVERN NAMEROLL CODE ----------------------- */

<<switch _tavernnameroll>>
	<<case 1>>
		<<set $tavern.name to "The " + $tavern.adjective + " " + $tavern.nounA>>
	<<case 2>> 
    	<<set $tavern.name to "The " + $tavern.nounA + " and " + $tavern.nounB>>
	<<case 3>> 
		<<set $tavern.name to "The " + $tavern.nounA + " and the " + $tavern.nounB>>
	<<case 4>>
    	<<set $tavern.name to "The " + $tavern.verb + " " + $tavern.nounA>>
	<<case 5>>
    	<<set $tavern.name to "The " + $tavern.verb + " " + $tavern.nounA + " and the " + $tavern.nounC>>
<<default>>
    <<set $tavern.name to "The " + $tavern.nounA + " Inn">>
<</switch>>


:: Modifiers
/* ------------------------- NAME ------------------------- */
<<if ["Silver", "Golden", "Glorious", "Beautiful", "Handsome", "Lovely", "Educated", "Ornate", "Wealthy", "Cleanly", "Jeweled", "Superior", "Flawless", "Exquisite", "Elegant", "Fine"].includes($tavern.adjective)>>
		<<set $tavern.wealthroll += 3>>
	<<elseif ["Blighted", "Withered", "Lecherous", "Faulty", "Cracked", "Common"].includes($tavern.adjective)>>
		<<set $tavern.wealthroll -= 3>>
<</if>>

/* ------------------------- BARTENDER RACE -------------------------- */
/* THIS IS IN THE BARTENDER PASSAGE */

/* ------------------------- WEALTH -------------------------- */

	<<if $town.wealth gt 95>>
		<<set $tavern.wealthroll += 5>>
	<<elseif $town.wealth gt 80>>
		<<set $tavern.wealthroll += 3>>
	<<elseif $town.wealth gt 70>>
		<<set $tavern.wealthroll += 2>>
	<<elseif $town.wealth gt 60>>
		<<set $tavern.wealthroll += 1, $tavern.populationroll += 1>>
	<<elseif $town.wealth gt 50>>
		<<set $tavern.wealthroll += 1, $tavern.populationroll += 3>>
	<<elseif $town.wealth gt 40>>
		<<set $tavern.wealthroll -= 1, $tavern.populationroll += 2>>
	<<elseif $town.wealth gt 30>>
		<<set $tavern.wealthroll -= 2>>
	<<elseif $town.wealth gt 20>>
		<<set $tavern.wealthroll -= 3, $tavern.sinroll += 1>>
	<<elseif $town.wealth lte 20>>
		<<set $tavern.wealthroll -= 5, $tavern.sinroll += 3, $tavern.populationroll -= 3>>
<</if>>
/* ------------------------- TYPE -------------------------- */
<<if $tavern.type is "brothel" or $tavern.type is "gambling den">>
		<<set $tavern.sinroll += 20, $tavern.roughnessroll +=4, $tavern.cleanlinessroll -= 5>>
	<<elseif $tavern.type is "quiet and low-key bar">>
		<<set $tavern.sinroll -= 15, $tavern.populationroll -= 5, $tavern.roughnessroll -=10, $tavern.cleanlinessroll += 3>>
	<<elseif $tavern.type is "raucous dive">>
		<<set $tavern.sinroll += 5, $tavern.populationroll += 15, $tavern.roughnessroll +=5, $tavern.cleanlinessroll -= 5>>
	<<elseif $tavern.type is "thieves' guild hangout">>
		<<set $tavern.sinroll += 15, $tavern.roughnessroll +=5>>
	<<elseif $tavern.type is "high-end dining club" or $tavern.type is "members-only club">>
		<<set $tavern.sinroll -= 10, $tavern.wealthroll += 5, $tavern.roughnessroll -=10, $tavern.cleanlinessroll += 10>>
	<<elseif $tavern.type is "gathering place for a secret society">>
		<<set $tavern.sinroll += 5, $tavern.populationroll -= 5>>
<</if>>
/* ------------------------- DRAW -------------------------- */
/*<<if $tavern.draw is "attractive waitstaff">>
		<<set $tavern.roughnessroll += 3, $tavern.sinroll += 1>>
	<<elseif $tavern.draw is "crude jokes the bartender makes">>
		<<set $tavern.roughnessroll += 3, $tavern.sinroll += 1>>		
	<<elseif $tavern.draw is "proximity to the thieves' guild headquarters" or $tavern.draw is "proximity to the brothel">>
		<<set $tavern.roughnessroll += 1, $tavern.sinroll += 3>>
	<<elseif $tavern.draw is "witty banter with the waitstaff" or $tavern.draw is "proximity to the church" or $tavern.draw is "incredible view" or $tavern.draw is "nice view">>
		<<set $tavern.roughnessroll -= 1, $tavern.sinroll -= 3, $tavern.cleanlinessroll += 1>>
	<<elseif tavern.draw is "warmth inside" or $tavern.draw is "huge fireplace">>
		<<set $tavern.roughnessroll -= 2, $tavern.sinroll -= 1, $tavern.cleanlinessroll += 1>>			
*/
	<<if $tavern.draw is "lack of bedbugs" or $tavern.draw is "clean beds">>
		<<set $tavern.roughnessroll -= 4, $tavern.sinroll -= 1, $tavern.cleanlinessroll += 15>>
<</if>>

/* ---------------------- TAVERN STRUCTURE MATERIAL ----------------------- */
<<if $tavern.structure is "hewn rock">>
		<<set $tavern.roughnessroll += 3>>
	<<elseif $tavern.structure is "chiseled stone">>
		<<set $tavern.roughnessroll -= 1>>
	<<elseif $tavern.structure is "marble">>
		<<set $tavern.cleanlinessroll += 5, $tavern.wealthroll += 6>>
<</if>>

/* ======================= RENDERS ======================= */
/* ------------------------- WEALTH -------------------------- */

	<<if $tavern.wealthroll gt 95>>
		<<set $tavern.cost += 4, $tavern.sizeroll += 3, $tavern.cleanlinessroll += 15, $tavern.roughnessroll -= 10>>
	<<elseif $tavern.wealthroll gt 80>>
		<<set $tavern.cost += 3, $tavern.cleanlinessroll += 10>>
	<<elseif $tavern.wealthroll gt 70>>
		<<set $tavern.wealth to "wealthy", $tavern.cost += 2, $tavern.cleanlinessroll += 6>>
	<<elseif $tavern.wealthroll gt 60>>
		<<set $tavern.cost += 1, $tavern.populationroll += 5, $tavern.cleanlinessroll += 4>>
	<<elseif $tavern.wealthroll gt 50>>
		<<set $tavern.populationroll += 5, $tavern.reputation -= 5, $tavern.cleanlinessroll += 2>>
	<<elseif $tavern.wealthroll gt 30>>
		<<set $tavern.cost -= 1, $tavern.reputation -= 7, $tavern.cleanlinessroll -= 15>>
	<<elseif $tavern.wealthroll lte 30>>
		<<set $tavern.cost -= 2, $tavern.reputation -= 10, $tavern.cleanlinessroll -= 25>>
<</if>>

/* ------------------------- SIZE -------------------------- */

	<<if $tavern.sizeroll gt 80>>
		<<set $tavern.population += 5, $tavern.roughnessroll +=3, $tavern.cleanlinessroll -= 2>>
	<<elseif $tavern.sizeroll gt 60>>
		<<set $tavern.population += 4, $tavern.roughnessroll +=1>>
	<<elseif $tavern.sizeroll gt 40>>
		<<set $tavern.population += 3>>
	<<elseif $tavern.sizeroll gt 20>>
		<<set $tavern.population -= 2, $tavern.sinroll -= 5>>
	<<elseif $tavern.sizeroll lte 20>>
		<<set $tavern.sinroll -= 5, $tavern.populationroll -= 5, $tavern.roughnessroll -=3>>
<</if>>

/* ------------------------- ROUGHNESS -------------------------- */

	<<if $tavern.roughnessroll gt 80>>
		<<set $tavern.population += 3, $tavern.sinroll +=5, $tavern.cleanlinessroll -= 4>>
	<<elseif $tavern.roughnessroll gt 60>>
		<<set $tavern.population += 1, $tavern.sinroll +=3, $tavern.cleanlinessroll -= 2>>
	<<elseif $tavern.roughnessroll gt 50>>
		<<set $tavern.population += 1, $tavern.sinroll -=1>>
	<<elseif $tavern.roughnessroll gt 40>>
		<<set $tavern.population += 2, $tavern.sinroll -=3>>
	<<elseif $tavern.roughnessroll gt 30>>
		<<set $tavern.population -= 5, $tavern.sinroll -=1, $tavern.wealthroll += 1>>
	<<elseif $tavern.roughnessroll gt 20>>
		<<set $tavern.population -= 10, $tavern.sinroll -=3, $tavern.wealthroll -= 1>>
	<<elseif $tavern.roughnessroll lte 20>>
		<<set $tavern.population -= 15, $tavern.sinroll -=5, $tavern.wealthroll -= 3>>
<</if>>

/* ------------------------- CLEANLINESS -------------------------- */

	<<if $tavern.cleanlinessroll gt 80>>
		<<set $tavern.wealthroll +=3, $tavern.roughnessroll -= 3>>
	<<elseif $tavern.cleanlinessroll gt 70>>
		<<set $tavern.wealthroll +=2, $tavern.roughnessroll -= 3>>
	<<elseif $tavern.cleanlinessroll gt 60>>
		<<set $tavern.wealthroll +=1, $tavern.roughnessroll -= 2>>
	<<elseif $tavern.cleanlinessroll gt 50>>
		<<set $tavern.roughnessroll -= 2>>
	<<elseif $tavern.cleanlinessroll gt 40>>
		<<set $tavern.roughnessroll -= 1>>
	<<elseif $tavern.cleanlinessroll gt 30>>
		<<set $tavern.population -= 1, $tavern.sinroll +=1, $tavern.wealthroll -= 2>>
	<<elseif $tavern.cleanlinessroll gt 20>>
		<<set $tavern.population -= 2, $tavern.sinroll +=3, $tavern.wealthroll -= 4>>
	<<elseif $tavern.cleanlinessroll lte 20>>
		<<set $tavern.population -= 3, $tavern.sinroll +=5, $tavern.wealthroll -= 8>>
<</if>>


:: Names
/* ------------------------- NAMES -------------------------- */
<<set $name to {
	last: ["Alder", "Ash", "Ashdown", "Atwood", "Barnes", "Becker", "Berry", "Briar", "Briggs", "Brock", "Brook", "Bundy", "Burnside", "Burroughs", "Bush", "Butcher", "Butler", "Clay", "Court", "Cox", "Croft", "Cross", "Crump", "Dale", "Deane", "Delaney", "Dike", "Dodd", "Ford", "Forrest", "Fox", "Freeman", "Garside", "Gorsuch", "Graves", "Green", "Greeves", "Gross", "Grove", "Grover", "Hall", "Hawthorne", "Hazel", "Head", "Heather", "Hill", "Holley", "Holmes", "Holt", "Homer", "Hooke", "Hope", "House", "Howe", "Hume", "Hyde", "Johnston", "Kaye", "Keats", "Kerry", "Kirk", "Lamb", "Layne", "Lea", "Lowell", "March", "Marsh", "Marshal", "Martin", "May", "Millerchip", "Mills", "Moore", "Newby", "Paine", "Paxton", "Perrin", "Pike", "Pitt", "Preacher", "Provost", "Purple", "Ridge", "Rock", "Rose", "Rowen", "Sangster", "Sellers", "Shaw", "Short", "Thorne", "Underwood", "Walsh", "Wells", "West", "Whitney", "Wilde", "Wood", "Wragge", "Wynne"],
	man: ["Aaryn", "Aaro", "Aarus", "Abramus", "Abrahm", "Abyl", "Abelus", "Adannius", "Adanno", "Aedam", "Adym", "Adamus", "Aedrian", "Aedrio", "Aedyn", "Aidyn", "Aelijah", "Elyjah", "Aendro", "Androe", "Aenry", "Hynroe", "Hynrus", "Aethan", "Aethyn", "Aevan", "Evyn", "Evanus", "Alecks", "Alyx", "Alexandyr", "Xandyr", "Alyn", "Alaen", "Andrus", "Aendrus", "Anglo", "Aenglo", "Anglus", "Antony", "Antonyr", "Astyn", "Astinus", "Axelus", "Axyl", "Benjamyn", "Benjamyr", "Braidyn", "Brydus", "Braddeus", "Brandyn", "Braendyn", "Bryus", "Bryne", "Bryn", "Branus", "Caeleb", "Caelyb", "Caerlos", "Carlus", "Cameryn", "Camerus", "Cartus", "Caertero", "Charlus", "Chaerles", "Chyrles", "Christophyr", "Christo", "Chrystian", "Chrystan", "Connorus", "Connyr", "Daemian", "Damyan", "Daenyel", "Danyel", "Davyd", "Daevo", "Dominac", "Dylaen", "Dylus", "Elius", "Aeli", "Elyas", "Helius", "Helian", "Emilyan", "Emilanus", "Emmanus", "Emynwell", "Ericus", "Eryc", "Eryck", "Ezekius", "Zeckus", "Ezekio", "Ezrus", "Yzra", "Gabrael", "Gaebriel", "Gael", "Gayl", "Gayel", "Gaeus", "Gavyn", "Gaevyn", "Goshwa", "Joshoe", "Graysus", "Graysen", "Gwann", "Ewan", "Gwyllam", "Gwyllem", "Haddeus", "Hudsyn", "Haesoe", "Haesys", "Haesus", "Handus", "Handyr", "Hantus", "Huntyr", "Haroldus", "Haryld", "Horgus", "Horus", "Horys", "Horyce", "Hosea", "Hosius", "Iaen", "Yan", "Ianus", "Ivaen", "Yvan", "Jaecoby", "Jaecob", "Jaeden", "Jaedyn", "Jaeremiah", "Jeremus", "Jasyn", "Jaesen", "Jaxon", "Jaxyn", "Jaxus", "Johnus", "Jonus", "Jonaeth", "Jonathyn", "Jordus", "Jordyn", "Josaeth", "Josephus", "Josaeus", "Josayah", "Jovanus", "Giovan", "Julyan", "Julyo", "Jyck", "Jaeck", "Jacus", "Kaevin", "Kevyn", "Vinkus", "Laevi", "Levy", "Levius", "Landyn", "Laendus", "Leo", "Leonus", "Leonaerdo", "Leonyrdo", "Lynardus", "Lincon", "Lyncon", "Linconus", "Logaen", "Logus", "Louis", "Lucius", "Lucae", "Lucaen", "Lucaes", "Lucoe", "Lucus", "Lyam", "Maeson", "Masyn", "Maetho", "Mathoe", "Matteus", "Matto", "Maxus", "Maximus", "Maximo", "Maxymer", "Mychael", "Mygwell", "Miglus", "Mythro", "Mithrus", "Naemo", "Naethyn", "Nathanus", "Naethynel", "Nicholaes", "Nycholas", "Nicholys", "Nicolus", "Nolyn", "Nolanus", "Olivyr", "Alivyr", "Olivus", "Oscarus", "Oscoe", "Raen", "Ryn", "Robertus", "Robett", "Bertus", "Romyn", "Romanus", "Ryderus", "Ridyr", "Samwell", "Saemuel", "Santegus", "Santaegus", "Sybasten", "Bastyen", "Tago", "Aemo", "Tagus", "Theodorus", "Theodus", "Thaeodore", "Thomys", "Thomas", "Tommus", "Tylus", "Tilyr", "Uwyn", "Oewyn", "Victor", "Victyr", "Victorus", "Vincynt", "Vyncent", "Vincentus", "Wyttus", "Wyaett", "Xavius", "Havius", "Xavyer", "Yago", "Tyago", "Tyego", "Ysaac", "Aisaac", "Ysaiah", "Aisiah", "Siahus", "Zacharus", "Zachar", "Zachaery"],
	woman: ["Abigayl", "Aebria", "Aeobreia", "Breia", "Aedria", "Aodreia", "Dreia", "Aeliya", "Aliya", "Aella", "Aemilya", "Aemma", "Aemy", "Amy", "Ami", "Aeria", "Arya", "Aeva", "Aevelyn", "Evylann", "Alaexa", "Alyxa", "Alina", "Aelina", "Aelinea", "Allisann", "Allysann", "Alyce", "Alys", "Alysea", "Alyssia", "Aelyssa", "Amelya", "Maelya", "Andreya", "Aendrea", "Arianna", "Aryanna", "Arielle", "Aryell", "Ariella", "Ashlena", "Aurora", "Avaery", "Avyrie", "Bella", "Baella", "Brooklinea", "Bryanna", "Brynna", "Brinna", "Caemila", "Chloe", "Chloeia", "Claira", "Clayre", "Clayra", "Delyla", "Dalyla", "Elisybeth", "Aelisabeth", "Ellia", "Ellya", "Elyana", "Eliana", "Eva", "Falyne", "Genaesis", "Genaesys", "Gianna", "Jianna", "Janna", "Graece", "Grassa", "Haenna", "Hanna", "Halya", "Harperia", "Peria", "Hazyl", "Hazel", "Jasmyne", "Jasmine", "Jocelyne", "Joceline", "Celine", "Kaelia", "Kaelya", "Kathryne", "Kathrine", "Kayla", "Kaila", "Kymber", "Kimbera", "Layla", "Laylanna", "Leia", "Leya", "Leah", "Lilia", "Lylia", "Luna", "Maedisa", "Maelania", "Melania", "Maya", "Mya", "Myla", "Milae", "Naomi", "Naome", "Natalya", "Talya", "Nathylie", "Nataliae", "Thalia", "Nicola", "Nikola", "Nycola", "Olivya", "Alivya", "Penelope", "Paenelope", "Pynelope", "Rianna", "Ryanna", "Ruby", "Ryla", "Samaentha", "Samytha", "Sara", "Sarah", "Savannia", "Scarletta", "Sharlotta", "Caerlotta", "Sophya", "Stella", "Stylla", "Valentyna", "Valerya", "Valeria", "Valia", "Valea", "Victorya", "Vilettia", "Ximena", "Imaena", "Ysabel", "Zoe", "Zoeia", "Zoea", "Zoesia"],
	dragonbornprefix: ["Ar", "Hark", "Duh", "Ek", "Er", "Esh", "Ses", "Sesh", "Shedin", "Kriv", "Kry", "Sha", "Shys", "Thu", "Tin", "Tha", "Lihm", "Ghe"],
	dragonbornsuffix: ["ath", "ar", "ark", "ash", "ith", "ir", "ik", "ish", "aan", "an", "ina", "una", "ima", "arn", "inn", "hun", "akal", "ala"],
	maleelf: ["Adran", 
"Aelar", 
"Aerdeth", 
"Ahvain", 
"Aramil", 
"Arannis", 
"Aust", 
"Azaki", 
"Beiro", 
"Berrian", 
"Caeldrim", 
"Carric", 
"Dayereth", 
"Dreali", 
"Efieril", 
"Eiravel", 
"Enialis", 
"Erdan", 
"Erevan", 
"Fivin", 
"Galinndan", 
"Gennal", 
"Hadarai", 
"Halimath", 
"Heian", 
"Himo", 
"Immeral", 
"Ivellios", 
"Korfel", 
"Lamlis", 
"Laucian", 
"Lucan", 
"Mindartis", 
"Naal", 
"Nutae", 
"Paelias", 
"Peren", 
"Quarion", 
"Riardon", 
"Rolen", 
"Soveliss", 
"Suhnae", 
"Thamior", 
"Tharivol", 
"Theren", 
"Theriatis", 
"Thervan", 
"Uthemar", 
"Vanuath", 
"Varis"],
	femaleelf: ["Adria", 
"Ahinar", 
"Althaea", 
"Anastrianna", 
"Andraste", 
"Antinua", 
"Arara", 
"Baelitae", 
"Bethrynna", 
"Birel", 
"Caelynn", 
"Chaedi", 
"Claira", 
"Dara", 
"Drusilia", 
"Elama", 
"Enna", 
"Faral", 
"Felosial", 
"Hatae", 
"Ielenia", 
"Ilanis", 
"Irann", 
"Jarsali", 
"Jelenneth", 
"Keyleth", 
"Leshanna", 
"Lia", 
"Maiathah", 
"Malquis", 
"Meriele", 
"Mialee", 
"Myathethil", 
"Naivara", 
"Quelenna", 
"Quillathe", 
"Ridaro", 
"Sariel", 
"Shanairla", 
"Shava", 
"Silaqui", 
"Sumnes", 
"Theirastra", 
"Thiala", 
"Tiaathque", 
"Traulam", 
"Vadania", 
"Valanthe", 
"Valna", 
"Xanaphia"],
	femaledwarf: ["Anbera", 
"Artin", 
"Audhild", 
"Balifra", 
"Barbena", 
"Bardryn", 
"Bolhild", 
"Dagnal", 
"Dafifi", 
"Delre", 
"Diesa", 
"Hdeth", 
"Eridred", 
"Falkrann", 
"Fallthra", 
"Finelien", 
"Gillydd", 
"Gunnloa", 
"Gurdis", 
"Helgret", 
"Helja", 
"Hihna", 
"Illde", 
"Jarana", 
"Kathra", 
"Kilia", 
"Kristryd", 
"Liftrasa", 
"Marastyr", 
"Mardred", 
"Morana", 
"Nalaed", 
"Nora", 
"Nurkara", 
"Orifi", 
"Ovina", 
"Riswynn", 
"Sannl", 
"Therlin", 
"Thodris", 
"Torbera", 
"Tordrid", 
"Torgga", 
"Urshar", 
"Valida", 
"Vistra", 
"Vonana", 
"Werydd", 
"Whurdred", 
"Yurgunn"],
	maledwarf: ["Adrik", 
"Alberich", 
"Baern", 
"Barendd", 
"Beloril", 
"Brottor", 
"Dain", 
"Dalgal", 
"Darrak", 
"Delg", 
"Duergath", 
"Dworic", 
"Eberk", 
"Einkil", 
"Elaim", 
"Erias", 
"Fallond", 
"Fargrim", 
"Gardain", 
"Garur", 
"Gimgen", 
"Gimurt", 
"Harbek", 
"Kildrak", 
"Kilvar", 
"Morgran", 
"Morkral", 
"Nalral", 
"Nordak", 
"Nuraval", 
"Oloric", 
"Olunt", 
"Orsik", 
"Oskar", 
"Rangfim", 
"Reirak", 
"Rurik", 
"Taklinn", 
"Thoradin", 
"Thorin", 
"Thradal", 
"Tordek", 
"Traubon", 
"Travok", 
"Ulfgar", 
"Urain", 
"Veit", 
"Vonbin", 
"Vondal", 
"Whurbin"]
}
>>


:: Fairmath
/*

<<widget "wealthincrease">>
<<set $tavern.wealthrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "wealthdecrease">>
<<set $tavern.wealthrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "populationincrease">>
<<set $tavern.populationrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "populationdecrease">>
<<set $tavern.populationrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "reputationincrease">>
<<set $tavern.reputationrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "reputationdecrease">>
<<set $tavern.reputationrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "sinincrease">>
<<set $tavern.sinrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "sindecrease">>
<<set $tavern.sinrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "sizeincrease">>
<<set $tavern.sizerollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "sizedecrease">>
<<set $tavern.sizerollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "diversityincrease">>
<<set $tavern.diversityrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "diversitydecrease">>
<<set $tavern.diversityrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "roughnessincrease">>
<<set $tavern.roughnessrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "roughnessdecrease">>
<<set $tavern.roughnessrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

<<widget "cleanlinessincrease">>
<<set $tavern.cleanlinessrollresult to Math.round($args[0]+((100-$args[0])*($args[1]/100))) >>
<</widget>>

<<widget "cleanlinessdecrease">>
<<set $tavern.cleanlinessrollresult to Math.round($args[0]-($args[0]*($args[1]/100) )) >>
<</widget>>

*/


:: ShitPlotHooks
<<set $shitplothooks to ["A bard. Not a magic one. Just a bard. Like y'know. A minstrel or some shit he's ok I guess.", 
"Man chasing after a woman through a corn field. Distant saxophone is heard before both get eaten by a troll which chokes to death on them.", 
"The world's highest dragon lands, eats three deer, tries to fly, crashes, then just sleeps where he fell.", 
"A circus is in town. A shitty circus. Like a mobile Chuck E. Cheeses during a power outage.", 
"A village is being savaged by the most passive aggressive wizard ever.", 
"Two heavily armed fighters going at it hammer and tongs in the middle of the road, Every attack is a miss on both sides.", 
"Suddenly ninjas. They don't attack or anything, they have better things to do. But still.", 
"What looks like a sword is stabbed into a stone. Turns out it's just a hilt. Made of tin.", 
"A gnome, a halfling and a dwarf are having a 'who's the shortest' contest. It's fairly easy to resolve and they do so shortly after the party arrives.",
"A bandit calls for the party to stand and deliver. He's not robbing them, he just really wants his package.", 
"An ugly old man offers the party some of his lunch stew. It's not bad, could use some savory herb or something though.", 
"A young child is crying for his mom. His mom is maybe 40 feet away waiting for the kid to shut up and actually look.", 
"A carrot is near the road. If disturbed a ranger yells at the party for disturbing his rabbit bait.", 
"A rabbit is caught in a trap. If disturbed a ranger yells at the party for disturbing his fox bait.", 
"A fox is caught in a trap. If disturbed a ranger yells at the party for disturbing his wolf bait.", 
"A wolf is caught in a trap. If disturbed a ranger yells at the party for disturbing his bear bait.", 
"A bear is caught in a trap. If disturbed a ranger yells at the party for disturbing his owlbear bait.", 
"An owlbear is caught in a trap. If disturbed a ranger yells at the party for disturbing his ogre bait.", 
"An ogre caught in a trap. If disturbed a ranger yells at the party for disturbing his dragon bait.", 
"A dragon is caught in a trap. If disturbed a ranger yells at the party for disturbing his tarasque bait.", 
"A local child has taken to following the smartest member of the party around asking him 'why' in the most obnoxious voice possible.", 
"A bird poops right down the back of the most wizard-like character's clothes. Haha.", 
"A bird poops right in the eye of the most cleric-like character. Haha.", 
"A bird poops right on the mouth of the most thief like character. Haha.", 
"A branch or sign suddenly breaks it's base or chain or string and swings directly into the most wizard-like character's face.", 
"A lady hobo is telling shitty fortunes for 3 sp a pop. She's got no takers so far.", 
"A group of bandits or pirates are dead drunk singing bawdily together off to one side.", 
"A group of guards catch and hang a thief who just ripped off the necklace of some girl and stole from a few stands.", 
"An attractive bar wench starts flirting with the strongest looking male party member. If asked she'll gladly 'spend time' with them. Nothing else worth noting here.", 
"Town drunk wraps an arm around a party member claiming. 'You'se gais 're al'righ'' before puking on the fanciest dressed character and passing out.",
"Town drunk pukes on the fanciest dressed character and passes out.", 
"Worst pickpocket in the world attempts to rob from the character who would most easily notice and deal with them. Mostly he just ends up groping them and the running off.", 
"Fake wizard claims to be a real one. When questioned he flings glitter in the party's collective face yelling 'Glitterrust!' and running before tripping on his robes and knocking himself out.", 
"Hobo claims to be a deposed king who will reward the party if they can return to him his seal which some other hobos stole and are hiding out under the town bridge. He just wants to sleep under the bridge after the party clears the other hobos out.", 
"Local noble badly disguised as a commonfolk, no one care since he's got money and is a fairly decent person. Snobs if the party tries to talk to them.", 
"A short shower of copper bits fall from the sky. Like. 10 of them.", 
"A man in a nice set of robes is handing out pamphlets for the local good parish. Introduces himself as Brother Gideon.", 
"A man in a bad set of robes is handing out dead rats from the local evil temple. Introduces himself as Brother BabyStabber.", 
"A man in a decent set of robes is handing out blank pieces of paper from the local neutral temple. Introduces himself with a shrug and a sigh.", 
"A lovely gazebo is seen on the side of the road. It looks like a nice place for a picnic."]>>




/*
"An adventure party passes by whining about a lack of something called 'Cheetos' and some or of Dew of a Mountain. Weirdos.", 
"An adventure party passes by with each member spouting off silly 'Ni' noises or something about bushes. Weirdos.", 
"An adventure party passes by with a drow sneaky fellow wearing two scimitars whinging about wanting more 'Ex-Pee' because of 'Role-playing'. Weirdo.", 
"An armless, legless knight has bled out near a creek. Apparently his corpse has been here for a while. His armor seems to be made of paper.", 

"A fairy offers the party a wish if they can answer her riddles three. If they agree she just leaves laughing saying 'I didn't think someone would actually believe me on that.'. If they don't she gets mad and leaves saying 'It's not like they were THAT hard, pansies.'", 

"A lumberjack is eating his lunch on the side of the road. If asked he'll share with one person.", 
"A miner is eating his lunch on the side of the road. If asked he'll share a beer with one person.", 
"A cultist is eating his lunch on the side of the road. If asked he'll share a bagel with one person.", 
"A perfectly serviceable wooden shield is found on the side of the road. Not masterwork or magic. Just serviceable.", 
"A perfectly serviceable shortsword is found on the side of the road. Not masterwork or magic. Just serviceable.", 
"There's a huge pot hole in the road. Like HUGE, for a pothole, it's not a pit or anything. DC 3 Acrobatics check to not stumble on it. Failure means you take 1d2-1 nonlethal teasing damage and fall flat on your ungraceful face.", 
"A tune if heard off in the distance. Nothing in particular, just kind of a musical edge to the area. Like a light mist.", 
"A troop of guardsmen are patrolling the road. They ask you to clear the way and move on.", 
"A man is selling sausages from a decent cart. The sausages are ok.", 
"A man is selling sausages from a crappy cart. The sausages are good, but you start to feel bad for eating too many of them. Like you ate an entire tin of ice cream bad.", 
"A man is selling sausages from a good cart with bread rolls. The bread is bland, and the spice in the sausage is forgettable, but it's filling.", 
"A man is selling wiener dogs from a cart that's barking. Not to eat. He's just selling the dogs. They make good mousers he says.", 
"A woman in armor is offering to bed any man who can beat her in an arm wrestle. She's got a 23 Strength and isn't particularly pretty, but if you're into that it's there.", 

"A group of guards force a group of prostitutes to 'Move along then.'", 
"A minstrel plays nearby. He's ok, but he'd be a lot better if he actually put some practice in.", 
"A local pubkeep offers the party a round of drinks for half off on account of them looking thirsty.", 
"A local inn offers the party a dinner half off on account of them looking hungry.", 
"A man missing a leg thanks the party for the good that they've been doing.", "A man missing an arm spits at the party for the good they missed doing.", 
"Two bards are utterly failing to sing a song in tune.", 
"Two bards are actually killing a particular song. The crowd around them is pretty into it.", 
"A man is selling hats. He's willing to trade for skins if anyone in the party has any.",
"The party sees a mild acquaintance. S/He offers to get lunch with them.", "The party sees a mild annoyance. S/He flips them the bird before wandering off.", "A pie eating contest is in progress. It looks like it's down to the blacksmith's son or the cowherd's daughter.", "Two teenagers are walking down the street holding hands and blushing whenever one catches the other's eye.", "The wizard steps in shit. Roll 1d4 to see what kind. 1- Cow, 2- Cow, 3- Cow, 4- Builette.", "A group of bandits charge, but petter out before combat engages because the party looks too tough to take on.", "Seven men in hooded robes are fumbling around. Overhead is: 'Hey John, I think I've got your robes' 'Damnit Sev, your wife swapped our hoods again.' and 'Who's got my sash? It was the scarlet one.'","A drow is hung over on the side of the road. A three empty bottles of dwarven ale are nearby. He's waving his hands about muttering 'Turn off the sun.' Shortly after Dancing Lights twirl around his location as he lets out a groan of pain.", "A dwarf is passed out in a puddle of his own drool on the side of the road. A half empty bottle of elven wine is nearby.", "A friendly dog comes by and starts begging for treats from the most cleric-like party member.", "An unfriendly dog attempts to pee on the most wizard-like party member.", "Two old men are playing some sort of game on the side of the road talking mostly in murmurs, grunts, and chortles.", "Two old women are gossiping nearby knitting scarves longer than they are tall that are growing by the inch as you watch.", "A man is juggling torches nearby. Nothing goes amiss.", "Two young teenagers are arguing about whether a dragon could be three owlbears if the owlbears had armor and magic wands and the dragon had a sword.", "A local noble is in town collecting his due taxes.", "The worst bandit in the world attempts to way-lay the party with a sharpened stick and a dented pot lit. If actually confronted he faints in shock.", "The wizard discovers he has a sign pinned to the back of his robes reading 'Ass-zard'. It is unknown when it was placed there or how long it's been there.", "A dungeon is nearby, if investigated it turns out that it's still in the process of being excavated and won't be ready for several more years.", "The thief find a socket puppet nestled amongst his belongings. It appears to be made from one of the wizards socks.", "The fighter finds a flask of good booze they had forgot about amongst their belongings.", "The cleric finds a bag of honeyed nuts amongst her belongings."
*/


:: Tavern
<<set $tavern to {
	wordnoun: either("tavern", "tavern", "tavern", "tavern", "pub", "pub", "pub", "inn", "inn", "bar", "bar", "bar", "watering hole", "drinkery"),
	wealth: either("squalid", "poor", "modest", "comfortable", "wealthy", "aristocratic", "kingly"),
	cost: 10,
	wealthroll: random(1, 100),
	priceroll: random(-10, 10),
	populationroll: random(1, 100),
	reputationroll: random(1, 100),
	sinroll: random(1, 100),
	sizeroll: random(20, 80),
	diversityroll: random(20, 80),
	roughnessroll: random(1, 100),
	cleanlinessroll: random(1, 100),
	magicroll: random(1, 20),
	structure: either("wooden", "wooden", "wooden", "wooden", "wooden", "stone", "stone", "stone", "stone", "hewn rock", "chiseled stone"),
	type: either("quiet and low-key bar", "regular", "regular", "regular", "regular", "raucous dive", "raucous dive", "raucous dive", "raucous dive", "thieves' guild hangout", "gathering place for a secret society", "high-end dining club", "high-end dining club", "gambling den", "gambling den", "$bartender.race only club", "guild-member's only club", "members-only club", "brothel", "brothel"),
	draw: either("attractive waitstaff", "resident bard", "<<print $tavern.roughness>> atmosphere", "<<print $tavern.roughness>> atmosphere", "<<print $tavern.roughness>> atmosphere", "witty banter with the waitstaff", "crude jokes the bartender makes", "proximity to the thieves' guild headquarters", "warmth inside", "magic incense which is constantly burning", "proximity to the brothel", "proximity to the church", "location by the river", "wooden-chopping competition held weekly", "mahogany stairs", "clean beds", "lack of bedbugs", "magic bedbugs", "drunk wizard", "huge fireplace", "incredible view", "nice view"),
	shortages: ["wine", "booze", "grog", "whiskey", "mutton", "lamb", "carrots", "mugs", "forks", "frogs", "bread", "mushrooms", "salt", "silver pieces", "chairs", "eggs", "potatoes"]
}>>

/* Exclusion code for brothels + churches */
<<if ($tavern.type is "gambling den" && $tavern.draw is "proximity to the church")>>
		<<set $tavern.draw to "proximity to the brothel">>
	<<elseif ($tavern.type is "brothel" && $tavern.draw is "proximity to the church")>>
		<<set $tavern.draw to "proximity to the brothel">>
	<<elseif ($tavern.type is "raucous dive" && $tavern.draw is "proximity to the church")>>
		<<set $tavern.draw to "proximity to the brothel">>
<</if>>


:: Bartender
<<set $bartender to {
	lastname: either($name.last),
	gender: either($npc.gender),
	race: either($npc.race),
	raceroll: random(1, 100),
	age: either($npc.age),
	height: either($npc.height),
	weight: either($npc.weight),
	trait: either($npc.trait),
	idle: ["polishing a glass with $bartender.hisher hands", "pouring a drink for a customer", "taking an order from a customer", "talking with a customer", "picking $bartender.hisher nose", "playing a card game by $bartender.himher<<nobr>>self<</nobr>>", "checking the stock levels of the beer on tap", "shouting into the kitchen, annoyed", "yelling instructions into the kitchen", "leaning against a stool, surveying the work of one of the barmaids"],
	owner: either(["owner", "caretaker", "proud owner", "proprietor", "current owner", "manager", "manager", "acting manager"]),
	greeting: ["nods at you", "welcomes you warmly", "smiles and greets you", "raises a hand with a wave", "sizes you up, before $bartender.heshe nods at you", "checks you out for just a moment before smiling at you"]
}>>

<<if $bartender.gender is "man">>
	<<set $bartender.heshe to "he">>
	<<set $bartender.himher to "him">>
	<<set $bartender.hisher to "his">>
	<<set $bartender.boygirl to "boy">>
	<<set $bartender.manwoman to "man">>
	<<set $bartender.menwomen to "men">>
	<<set $bartender.guygirl to "guy">>
	<<set $bartender.firstname to either($name.man)>>
<<elseif $bartender.gender is "woman">>
	<<set $bartender.heshe to "she">>
	<<set $bartender.himher to "her">>
	<<set $bartender.hisher to "her">>
	<<set $bartender.boygirl to "girl">>
	<<set $bartender.manwoman to "woman">>
	<<set $bartender.menwomen to "women">>
	<<set $bartender.guygirl to "girl">>
	<<set $bartender.firstname to either($name.woman)>>
<</if>>

<<set _BarEyeColours to ["yellow", "amber", "brown", "hazel", "green", "blue", "gray", "aqua", "red", "purple", "pale brown", "pale blue", "pale green", "ash gray"]>>
<<set _bareye to random (1, 10)>>
<<if _bareye gt 9>>
	<<set $bartender.eyes to _BarEyeColours[random(10, 14)]>>
<<elseif _bareye gt 6>>
	<<set $bartender.eyes to _BarEyeColours[random(0, 9)]>>
<<else>>
	<<set $bartender.eyes to _BarEyeColours[random(1, 6)]>>
<</if>>

<<set _BarskinColours to ["translucent", "white", "pale", "fair", "light", "light tan", "tan", "dark tan", "brown"]>>
<<set _Barskin to random(1, 10)>>
<<if _Barskin gt 6>>
		<<set $bartender.skincolour to _BarskinColours[random(5, 9)]>>
	<<elseif _Barskin gt 3>>
		<<set $bartender.skincolour to _BarskinColours[random(3, 6)]>>
	<<elseif _Barskin lte 3>>
		<<set $bartender.skincolour to _BarskinColours[random(0, 3)]>>
<</if>>

<<set $bartender.hair to $npc.hairtype.random() + " " + $npc.haircolour.random() + " hair">>

<<set _barphysicaltraitroll to random(1, 10)>>
	<<if _barphysicaltraitroll gt 8>>
		<<set $bartender.physicaltrait to either($npc.scar)>>
	<<elseif _barphysicaltraitroll gt 6>>
		<<set $bartender.physicaltrait to either($npc.tattoo)>>
	<<elseif _barphysicaltraitroll lte 6>>
		<<set $bartender.physicaltrait to $bartender.hair>>
	<</if>>

<<set $bartender.name to "$bartender.firstname" + " " + "$bartender.lastname">>


/* ------------------------- BARTENDER RACE -------------------------- */
<<switch $bartender.race>>
	<<case "human">>
		<<set $tavern.diversityroll -= 10>>
	<<case "half-elf">>
		<<set $bartender.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $bartender.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight"), $tavern.diversityroll += 5, $tavern.roughnessroll -= 5, $tavern.magicroll += 2>>
	<<case "elf">>
		<<set $bartender.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $bartender.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "slightly underweight"), $tavern.diversityroll += 5, $tavern.roughnessroll -= 10, $tavern.wealthroll += 5, $tavern.magicroll += 4>>
	<<case "dwarf">>
		<<set $bartender.height to either("short", "squat"), $bartender.weight to either("stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby", "portly"), $tavern.diversityroll += 5, $tavern.roughnessroll += 5, $tavern.wealthroll += 5, $tavern.magicroll += 1>>
	<<case "gnome">>
		<<set $bartender.height to either("short", "tiny"),  $bartender.weight to either("stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby"),$tavern.diversityroll += 10, $tavern.roughnessroll -= 5, $tavern.magicroll += 1>>
	<<case "halfling">>
		<<set $bartender.height to either("short", "tiny"), $bartender.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight"), $tavern.diversityroll += 5, $tavern.roughnessroll -= 5, $tavern.magicroll += 1>>
	<<case "half-orc">>
		<<set $bartender.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight"), $tavern.diversityroll += 10, $tavern.roughnessroll += 15>>
	<<case "dragonborn">>
		<<set $bartender.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $bartender.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight"), $tavern.diversityroll += 10, $tavern.roughnessroll += 5, $tavern.wealthroll += 5, $tavern.magicroll += 5>>
	<<case "tiefling">>
		<<set $bartender.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight"), $tavern.diversityroll += 15, $tavern.roughnessroll += 5, $tavern.sinroll += 15, $tavern.wealthroll += 10, $tavern.magicroll += 7>>
<</switch>>

/* Brothel Code - so the bartender is the Master or Madame of the brothel 
<<if ($tavern.draw is "brothel", $bartender.himher is "him")>>
		<<set $bartender.owner to "master">>
	<<elseif ($tavern.draw is "brothel", "$bartender.himher is "her")>>
		<<set $bartender.owner to "madame">>
<</if>>*/

/* Race Note Code - so humans are introduced as 'a short woman', and elves are introduced as elves. */
<<if $bartender.race is "human">>
		<<set $bartender.racenote to $bartender.height + " " + $bartender.manwoman>>
	<<else>>
		<<set $bartender.racenote to $bartender.race>>
<</if>>

<<switch $bartender.race>>
	<<case "elf">>
		<<set $bartender.racesingular to "elf",
		$bartender.raceplural to "elves",
		$bartender.raceadjective to "elven",
		$bartender.racelanguage to "Elfish">>
	<<case "dwarf">>
		<<set $bartender.racesingular to "dwarf",
		$bartender.raceplural to "dwarves",
		$bartender.raceadjective to "dwarven",
		$bartender.racelanguage to "Dwarven">>
	<<case "halfling">>
		<<set $bartender.racesingular to "halfling",
		$bartender.raceplural to "hobbits",
		$bartender.raceadjective to "dwarven",
		$bartender.racelanguage to "Dwarven">>	
	<<case "half-orc">>
		<<set $bartender.racesingular to "half-orc",
		$bartender.raceplural to "half-orcs",
		$bartender.raceadjective to "orcish",
		$bartender.racelanguage to "Orcish">>
	<<case "dragonborn">>
		<<set $bartender.racesingular to "drake",
		$bartender.raceplural to "drakes",
		$bartender.raceadjective to "draconian",
		$bartender.racelanguage to "Draconic">>
	<<case "tiefling">>
		<<set $bartender.racesingular to "tiefling",
		$bartender.raceplural to "tieflings",
		$bartender.raceadjective to "devilish",
		$bartender.racelanguage to "Demonic">>
	<<default>>
		<<set $bartender.racesingular to "person",
		$bartender.raceplural to "people",
		$bartender.raceadjective to "human",
		$bartender.racelanguage to "Common">>
<</switch>>


:: NPC
<<set $npc to {
	lastname: $name.last.pluck(),
	gender: ["man", "woman"],
	race: ["human", "human", "human", "human", "human", "human", "half-elf", "half-elf", "elf", "elf", "dwarf", "dwarf", "gnome", "halfling", "half-orc", "dragonborn", "tiefling"],
	age: ["childlike", "rather young", "eighteen year old", "surprisingly young", "relatively young", "relatively young", "middle aged", "middle aged", "middle aged", "middle aged", "mid aged", "relatively old", "sun wizened", "quite old", "ancient"],
	height: ["tiny", "short", "slightly below average height", "rather average height", "slightly above average height", "tall", "tall", "tall", "giraffe-like"],
	weight: ["waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby", "portly"],
	haircolour: ["brunette", "brunette", "brown", "brownish", "muddy", "blonde", "blonde", "white", "black", "black"],
	hairtype: ["thick", "wispy", "straight", "straight", "wavy", "wavy", "curly", "wiry", "oily", "lush", "poofy", "long", "braided", "very long", "greasy", "unruly", "unusually styled", "short cropped hair", "a shaved head"],
	scar: ["a jagged scar", "a dark purple scar", "an angry red scar", "a long, thin scar running up the arm", "a scar on the eye", "a scar around the neck", "a scar on the throat", "a fiery red scar", "a finger missing", "two fingers missing"],
	tattoo: ["a dagger tattoo", "an arrow tattoo", "an anchor tattoo", "a skull tattoo", "a pair of crossed bones tattoo", "a snake tattoo", "a scorpion tattoo", "a spider web tattoo", "a heart tattoo", "a ring of thorns tattoo", "a mermaid tattoo", "a dragon tattoo"],
	class: ["barbarian", "bard", "cleric", "druid", "fighter", "monk", "rogue", "ranger", "paladin", "sorcerer", "warlock", "wizard"],
	profession: ["Actor", "Advocate", "Advisor", "Animal handler", "Apothecary", "Architect", "Archivist", "Armorer", "Astrologer", "Baker", "Banker", "Barber", "Barkeep", "Blacksmith", "Bookseller", "Brewer", "Bricklayer", "Brothel keeper", "Buccaneer", "Butcher", "Caravanner", "Carpenter", "Cartographer", "Chandler", "Chef", "Clock maker", "Cobbler", "Cook", "Counselor", "Courtesan", "Courtier", "Cowherd", "Dancer", "Diplomat", "Distiller", "Diver", "Farmer", "Fisherman", "Fishmonger", "Gardener", "General", "Gladiator", "Glovemaker", "Goldsmith", "Grocer", "Guardsman", "Guildmaster", "Hatmaker", "Healer", "Herald", "Herbalist", "Hermit", "Historian", "Hunter", "Ice seller", "Innkeeper", "Inventor", "Jailer", "Jester", "Jeweler", "Judge", "Knight", "Lady", "Leatherworker", "Librarian", "Linguist", "Locksmith", "Lord", "Lumberjack", "Mason", "Masseur", "Merchant", "Messenger", "Midwife", "Miller", "Miner", "Minister", "Minstrel", "Monk", "Mortician", "Necromancer", "Noble", "Nun", "Nurse", "Officer", "Painter", "Patissier", "Perfumer", "Philosopher", "Physician", "Pilgrim", "Potter", "Priest", "Privateer", "Professor", "Roofer", "Ropemaker", "Rugmaker", "Saddler", "Sailor", "Scabbard maker", "Sculptor", "Scavenger", "Scholar", "Seamstress", "Servant", "Shaman", "Shepherd", "Ship's captain", "Silversmith", "Slave", "Slaver", "Smith", "Soldier", "Spice Merchant", "Squire", "Stablehand", "Stevedore", "Stonemason", "Steward", "Street seller", "Street sweeper", "Student", "Surgeon", "Surveyor", "Sailor", "Tanner", "Tavernkeeper", "Tax collector", "Teacher", "Thatcher", "Thief", "Torturer", "Town crier", "Toymaker", "Vendor", "Veterinarian", "Vintner", "Weaver", "Wetnurse", "Woodcarver", "Wood seller", "Wrestler", "Writer"],
	trait: ["fidgets", "drinks too much", "eats too much", "swears often", "has poor hygiene", "cannot resist flirting", "cannot stop staring at you", "sweats profusely and easily", "is a habitual liar", "embellishes the truth", "exaggerates details", "has a short temper", "is melodramatic", "gossips about the most mundane things", "cannot resist a juicy secret", "chews with an open mouth", "often sniffs audibly", "is incredibly gullible", "is skeptical of everything", "paces about incessantly", "makes poor eye contact"],
	currentmood: ["annoyed", "scared", "relaxed", "concerned", "bemused", "stressed", "amused", "content", "distracted"],
	idle: ["sitting, with a piece of bread in hand", "sitting, mug in hand", "poring over some map", "reading some letter intently", "reading a book", "shuffling a pack of cards", "chewing on a piece of hay", "sharpening a knife", "buffing a piece of armour", "polishing a shield", "sharpening the blade on a fearsome looking dagger", "cutting an apple into bite sized pieces", "biting into an apple", "eating an apple while looking at some book", "eating a hunk of cheese while reading a book", "sipping out of a huge mug while reading a book"],
	reading: ["a piece of history- my forefather's journal, detailing his life in $town.name when it was just a settlement.", "my journal, from many years ago.", "my mother's journal, from just before she disappeared", "a document which I received by postboy two days ago... I believe it is in code, and somebody is trying to tell me something.", "a traitor's memoirs, extremely rare... I thought it would be a good laugh, but some of what he says is concerningly accurate.", "some sort of spell, though I don't know how to read it.", "a document I bought at the flea market; it looks to be a set of instructions on how to make a golem.", "a book which I bought, believing it to be blank, and suitable for a journal. However, now there's this strange foreign script that I can't read in it.", "a book that I bought as a gift for my mother, who loves beautiful covers, despite not being able to read.", "a supposedly blank book, but every time I open it, different words appear in a strange language."]
}>>

<<set $npc.gender to $cloner.gender.random()>>
<<set $npc.race to $cloner.race.random()>>
/*<<set $npc.height to $cloner.height.random()>>
<<set $npc.weight to $cloner.weight.random()>>
<<set $npc.age to $cloner.age.random()>>
<<set $npc.haircolour to $cloner.haircolour.random()>>
<<set $npc.hairtype to $cloner.hairtype.random()>>
<<set $npc.class to $cloner.class.random()>>
<<set $npc.profession to $cloner.profession.random()>>
<<set $npc.trait to $cloner.trait.random()>>*/


<<set _eyeColours to ["yellow", "amber", "brown", "hazel", "green", "blue", "gray", "aqua", "red", "purple", "pale brown", "pale blue", "pale green", "ash gray"]>>
<<set _eye to random (1, 10)>>
<<if _eye gt 9>>
	<<set $npc.eyes to _eyeColours[random(10, 14)]>>
<<elseif _eye gt 6>>
	<<set $npc.eyes to _eyeColours[random(0, 9)]>>
<<else>>
	<<set $npc.eyes to _eyeColours[random(1, 6)]>>
<</if>>


<<set _skinColours to ["translucent", "white", "pale", "fair", "light", "light tan", "tan", "dark tan", "brown"]>>
<<set _skin to random(1, 10)>>
<<if _skin gt 6>>
		<<set $npc.skincolour to _skinColours[random(5, 9)]>>
	<<elseif _skin gt 3>>
		<<set $npc.skincolour to _skinColours[random(3, 6)]>>
	<<elseif _skin lte 3>>
		<<set $npc.skincolour to _skinColours[random(0, 3)]>>
	<<else>>
		<<set $tavern.error += 1>>
<</if>>

/* Race Note Code - so humans are introduced as 'a short woman', and elves are introduced as elves. */
<<if $npc.race is "human">>
		<<set $npc.racenote to $npc.height + $npc.manwoman>>
	<<else>>
		<<set $npc.racenote to $npc.race>>
<</if>>

<<switch $npc.race>>
		<<case "elf">>
		<<set $npc.racesingular to "elf",
		$npc.raceplural to "elves",
		$npc.raceadjective to "elfish",
		$npc.racelanguage to "Elven">>
		<<if $npc.gender is "man">>
				<<set $npc.firstname to $name.maleelf.pluck()>>
			<<elseif $npc.gender is "woman">>
				<<set $npc.firstname to $name.femaleelf.pluck()>>
		<</if>>
	<<case "dwarf">>
		<<set $npc.racesingular to "dwarf",
		$npc.raceplural to "dwarves",
		$npc.raceadjective to "dwarven",
		$npc.racelanguage to "Dwarven">>
		<<if $npc.gender is "man">>
				<<set $npc.firstname to $name.maledwarf.pluck()>>
			<<elseif $npc.gender is "woman">>
				<<set $npc.firstname to $name.femaledwarf.pluck()>>
		<</if>>
	<<case "halfling">>
		<<set $npc.racesingular to "halfling",
		$npc.raceplural to "hobbits",
		$npc.raceadjective to "halfling",
		$npc.racelanguage to "Halfling">>	
	<<case "half-orc">>
		<<set $npc.racesingular to "half-orc",
		$npc.raceplural to "half-orcs",
		$npc.raceadjective to "orcish",
		$npc.racelanguage to "Orcish">>
	<<case "dragonborn">>
		<<set $npc.racesingular to "drake",
		$npc.raceplural to "drakes",
		$npc.raceadjective to "draconian",
		$npc.racelanguage to "Draconic">>
	<<case "tiefling">>
		<<set $npc.racesingular to "tiefling",
		$npc.raceplural to "tieflings",
		$npc.raceadjective to "devilish",
		$npc.racelanguage to "Demonic">>
	<<case "half-elf">>
		<<set $npc.racesingular to "half-elf",
		$npc.raceplural to "half-elves",
		$npc.raceadjective to "elfish",
		$npc.racelanguage to "Elven">>	
	<<default>>
		<<set $npc.racesingular to "person",
		$npc.raceplural to "people",
		$npc.raceadjective to "man",
		$npc.racelanguage to "Common">>
<</switch>>
/*

<<set _npcphysicaltraitroll to random(1, 10)>>
	<<if _npcphysicaltraitroll gt 8>>
		<<set $npc.physicaltrait to either($npc.scar)>>
	<<elseif _npcphysicaltraitroll gt 6>>
		<<set $npc.physicaltrait to either($npc.tattoo)>>
	<<elseif _npcphysicaltraitroll lte 6>>
		<<set $npc.physicaltrait to either($npc.hair)>>
	<</if>>
*/


:: PlotGuy
<<set $plotguy to {
	lastname: either($name.last),
	gender: either($npc.gender),
	race: either($npc.race),
	age: either($npc.age),
	height: either($npc.height),
	weight: either($npc.weight)
}>>

<<if $plotguy.gender is "man">>
	<<set $plotguy.heshe to "he">>
	<<set $plotguy.himher to "him">>
	<<set $plotguy.hisher to "his">>
	<<set $plotguy.boygirl to "boy">>
	<<set $plotguy.manwoman to "man">>
	<<set $plotguy.menwomen to "men">>
	<<set $plotguy.guygirl to "guy">>
	<<set $plotguy.firstname to either($name.man)>>
<<elseif $plotguy.gender is "woman">>
	<<set $plotguy.heshe to "she">>
	<<set $plotguy.himher to "her">>
	<<set $plotguy.hisher to "her">>
	<<set $plotguy.boygirl to "girl">>
	<<set $plotguy.manwoman to "woman">>
	<<set $plotguy.menwomen to "women">>
	<<set $plotguy.guygirl to "girl">>
	<<set $plotguy.firstname to either($name.woman)>>
<</if>>

<<set _PlotGuyEyeColours to ["yellow", "amber", "brown", "hazel", "green", "blue", "gray", "aqua", "red", "purple", "pale brown", "pale blue", "pale green", "ash gray"]>>
<<set _PlotGuyeye to random (1, 10)>>
<<if _PlotGuyeye gt 9>>
	<<set $plotguy.eyes to _BarEyeColours[random(10, 14)]>>
<<elseif _PlotGuyeye gt 6>>
	<<set $plotguy.eyes to _BarEyeColours[random(0, 9)]>>
<<else>>
	<<set $plotguy.eyes to _BarEyeColours[random(1, 6)]>>
<</if>>

<<set _BarskinColours to ["translucent", "white", "pale", "fair", "light", "light tan", "tan", "dark tan", "brown"]>>
<<set _PlotGuyskin to random(1, 10)>>
<<if _PlotGuyskin gt 6>>
		<<set $plotguy.skincolour to _BarskinColours[random(5, 9)]>>
	<<elseif _PlotGuyskin gt 3>>
		<<set $plotguy.skincolour to _BarskinColours[random(3, 6)]>>
	<<elseif _PlotGuyskin lte 3>>
		<<set $plotguy.skincolour to _BarskinColours[random(0, 3)]>>
<</if>>

<<set $plotguy.hair to $npc.hairtype.random() + " " + $npc.haircolour.random() + " hair">>

<<set _PlotGuyphysicaltraitroll to random(1, 10)>>
	<<if _PlotGuyphysicaltraitroll gt 8>>
		<<set $plotguy.physicaltrait to either($npc.scar)>>
	<<elseif _PlotGuyphysicaltraitroll gt 6>>
		<<set $plotguy.physicaltrait to either($npc.tattoo)>>
	<<elseif _PlotGuyphysicaltraitroll lte 6>>
		<<set $plotguy.physicaltrait to either($npc.hair)>>
	<</if>>

<<set $plotguy.name to "$plotguy.firstname" + " " + "$plotguy.lastname">>


<<if $plotguy.race is "half-elf">>
	<<set $plotguy.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $plotguy.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight")>>
<<elseif $plotguy.race is "elf">>
	<<set $plotguy.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $plotguy.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "slightly underweight")>>
<<elseif $plotguy.race is "dwarf">>
	<<set $plotguy.height to either("short", "squat"), $plotguy.weight to either("stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby", "portly")>>
<<elseif $plotguy.race is "gnome">>
	<<set $plotguy.height to either("short", "tiny"),  $plotguy.weight to either("stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby")>>
<<elseif $plotguy.race is "halfling">>
	<<set $plotguy.height to either("short", "tiny"), $plotguy.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight")>>
<<elseif $plotguy.race is "half-orc">>
	<<set $plotguy.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight")>>
<<elseif $plotguy.race is "dragonborn">>
	<<set $plotguy.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $plotguy.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight")>>
<<elseif $plotguy.race is "tiefling">>
	<<set $plotguy.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight")>>
<</if>>


:: Town
<<set $town to {
	race: either(["human", "human", "human", "human", "dwarf", "dwarf", "dwarf", "elf", "elf", "half-orc", "half-elf"]),
	wealth: random(1, 100),
	reputation: random(1, 100),
	sin: random(1, 100),
	diversity: random(1, 100)
}>>

/* Town Population Roller */
<<set _townpopulationroll to random(1, 10)>>
	<<if _townpopulationroll gt 8>>
		<<set $town.population to random(3001, 6000), $town.type to "city", $town.wealth += 15, $town.reputation += 5, $town.sin += 15, $town.diversity += 10>>
	<<elseif _townpopulationroll gt 5>>
		<<set $town.population to random(1001, 3000), $town.type to "town", $town.wealth += 5, $town.reputation += 2, $town.sin += 5, $town.diversity += 4>>
	<<elseif _townpopulationroll gt 2>>
		<<set $town.population to random(301, 1000), $town.type to "village", $town.wealth += 2, $town.reputation -= 2, $town.sin -= 3, $town.diversity -= 4>>
	<<elseif _townpopulationroll lte 2>>
		<<set $town.population to random(30, 300), $town.type to "hamlet", $town.wealth -= 2, $town.reputation -= 12, $town.sin -= 15, $town.diversity -= 12>>	
	<</if>>

<<set _townpotentiallocation to ["Seacoast", "Forest", "Hills", "Plains", "Mountains", "River Coast", "Seacoast", "Forest", "Hills", "Plains", "Mountains", "River Coast", "Jungle", "Volcanic Field", "Seacoast", "Forest", "Hills", "Plains", "Mountains", "River Coast", "Tundra", "Ice Sheet", "Seacoast", "Desert", "Hills", "Plains", "Mountains", "River Coast", "Wasteland", "Oasis"]>>
<<set _terrainroll to random(1, 6)>>
	<<if _terrainroll lte 3>>
		  <<set $town.terrain to "temperate", $town.location to _townpotentiallocation[random(0, 5)]>>
	  <<elseif _terrainroll is 4>>
		  <<set $town.terrain to "temperate", $town.location to _townpotentiallocation[random(6, 13)]>>
	  <<elseif _terrainroll is 5>>
		  <<set $town.terrain to "temperate", $town.location to _townpotentiallocation[random(14, 21)]>>
	  <<elseif _terrainroll is 6>>
		  <<set $town.terrain to "temperate", $town.location to _townpotentiallocation[random(22, 29)]>>
<</if>>


:: Menu
<<nobr>>
<<linkreplace "<h4>Look at the menu.</h4>" t8n>>
	<h3>On offer today...</h3>
	<<if $tavern.wealthroll gt 80 && $tavern.roughness gt 80>>
		<<print either(
			"There's ales and boutique spirits available. Delicious smells are wafting from the kitchen, and your mouth salivates at the thought of the game that's on menu. $bartender.name proudly tells you that there are no stinkin' vegetables, and that $tavern.name stocks only the finest meats.", 
			"The smells emanating from the kitchen tantalise your nostrils, and when you ask the waiting staff what's available to drink, they begin to take a deep breath, before listing out a huge array of wines, ales, lagers, and spirits. The <<print $npc.weight.random()>> <<print either("man", "woman")>> then tells you that while $tavern.name is proud of its menu, it caters to an exclusively carnivorous diet.")>>
	<<elseif $tavern.wealthroll gt 80, $tavern.roughnessroll lt 30>>
		<<print either(
			"There's ales and boutique spirits available. Delicious smells are wafting from the kitchen, and your mouth salivates at the thought of the food that's on menu. The waitstaff tell you that $tavern.name is proud to be 100% violence free; upon further clarification, this is revealed to mean that there is not a single bone of meat in the entire $tavern.wordnoun<<nobr>>.<</nobr>>", 
			"The smells emanating from the kitchen tantalise your nostrils, and when you ask the waiting staff what's on menu, they begin to take a deep breath, before listing out a huge array of wines, ales, lagers, and spirits. The waitstaff tell you that $tavern.name is proud to be 100% violence free; upon further clarification, this is revealed to mean that there is not a single bone of meat in the entire $tavern.wordnoun.")>>		
	<<elseif $tavern.wealthroll gt 80>>
		<<print either(
			"There's ales and boutique spirits available. Delicious smells are wafting from the kitchen, and your mouth salivates at the thought of the game that's on menu.", 
			"The smells emanating from the kitchen tantalise your nostrils, and when you ask the waiting staff what's on menu, they begin to take a deep breath, before listing out a huge array of wines, ales, lagers, and spirits. It goes without saying that the kitchen is able to accomodate even the pickiest of royalty.")>>	
	<<elseif $tavern.wealthroll gt 60 && $tavern.roughnessroll gt 80>>
		<<print either(
			"There's ales available. The food is standard fare, with roast beef, pork, and mutton on the menu for food, but curiously no vegetables. $bartender.name spits when you mention this, and says 'no stinkin' veggies around here. We eat meat and we like it, so if you don't like it, yer not eatin'.", 
			"There's your standard beers, with the $tavern.wordnoun specialising in ales, which are allegedly quite good. As far as food is concerned, there's regular fare of beef, pork, and mutton, but strangely, no breads, cheeses, or potatoes of any description; you hear another patron loudly state that he loves not having to put up with those 'pointy ears complaining about the lack of green stuff' in $tavern.name<<nobr>>.<</nobr>>")>>	
	<<elseif $tavern.wealthroll gt 60 && $tavern.roughnessroll lt 30>>
		<<print either(
			"There's ales available. The food is a peculiarly limited menu; roast vegetables, breads, cheeses, but no meats, despite $tavern.name clearly being able to afford it.", 
			"There's your standard beers, with the $tavern.wordnoun specialising in ales, which are allegedly quite good. As far as food is concerned, there's breads, cheeses, and all the vegetables you could ever ask for, but not a single bone of meat is available.", 
			"Drinks are pretty standard, with a house lager being twenty percent off tonight. The menu is sadly lacking any meats, and when you ask $bartender.name about it, $bartender.heshe smiles, and says that $bartender.heshe is an animal lover, and wouldn't be able to forgive $bartender.himher<<nobr>>self<</nobr>> if an animal came to harm due to $bartender.hisher business.")>>	
	<<elseif $tavern.wealthroll gt 60 && $bartender.race is "elf">>
		<<print "Drinks are pretty standard, with the house lager being twenty percent off tonight. The menu is sadly lacking any meats, and when you ask $bartender.name about it, $bartender.heshe smiles, and says that $bartender.heshe is an animal lover, and wouldn't be able to forgive $bartender.himher<<nobr>>self<</nobr>> if an animal came to harm due to $bartender.hisher business.">>
	<<elseif $tavern.wealthroll gt 60>>
		<<print either(
			"There's ales available. The food is standard fare, with roast beef, pork, and mutton on the menu for food.", 
			"There's your standard beers, with the $tavern.wordnoun specialising in ales, which are allegedly quite good. As far as food is concerned, there's regular fare of beef, pork, breads and cheeses, and mutton.")>>
	<<elseif $tavern.wealthroll gt 40 && $tavern.sinroll gt 60>>
		<<print either(
			"There's the usual house-brewed ale on tap, but it is warm and undercarbonated. You suspect that $bartender.firstname has watered it down. As far as food is concerned, there is the usual mutton and breads available.", 
			"$bartender.firstname says that they have some freshly brewed ale, although you soon discover that to be a lie; it's lukewarm, and barely carbonated.")>>
	<<elseif $tavern.wealthroll gt 40>>
		<<print either(
			"There's the usual house-brewed ale on tap, but it is warm and undercarbonated. As far as food is concerned, there is the usual mutton and breads available.", 
			"There's a limited range of beers, some of which have very clearly soured.", 
			"The food on offer is rather plain, with nothing terribly interesting or appetizing. The beer is unfortunately not much better.")>>
	<<elseif $tavern.wealthroll gt 20>>
		<<print "There's what can only be described as piss available to drink, and the food isn't much better; other patrons can be seen chewing away at stale pieces of bread.">>
	<<elseif $tavern.wealthroll lte 20>>
		<<print "There's what can only be described as piss available to drink, and the food isn't much better; other patrons can be seen chewing away at stale pieces of bread.">>
	<</if>>
	
<<if $tavern.wealthroll gte 50>>
	<<print "The special brew of the week is a $specialbrew.type called $specialbrew.name, selling for <<money $specialbrew.cost>>. $specialbrew.description">>
<</if>><</linkreplace>><</nobr>>


:: LookAround
<<nobr>>
	<<if $tavern.populationroll gt 80 && $tavern.roughnessroll gt 60>>
			<<print either("You can barely hear each other over the din of the other patrons ($tavern.diversity), who are pretty rowdy. One elbows you in the ribs as they try to get around you to the bar.", "You find it difficult to hear each other over the din of the crowds that are drunkenly cavorting around.")>>
	<<elseif $tavern.populationroll gt 80>>
			<<print either("There's barely enough room to stand, let alone find a seat in the $tavern.wordnoun<<nobr>>.<</nobr>> The patrons of $tavern.name are $tavern.diversity", "The $tavern.wordnoun is packed, and the patrons who are $tavern.diversity are clamouring to find the few barmaids that are on staff.")>>
	<<elseif $tavern.populationroll gt 60 && $tavern.roughnessroll gt 60>>
			<<print either("The $tavern.wordnoun is packed with $tavern.diversity, and you're pushed to the side as somebody makes for the latrine in a hurry.", "It's peak hour for $tavern.name and you can tell that $bartender.name is concerned about a fight breaking out. $tavern.diversity")>>
	<<elseif $tavern.populationroll gt 60>>
			<<print either("The $tavern.wordnoun is pretty packed with $tavern.diversity, and it's difficult for you to find a seat. $tavern.diversity", "The $tavern.wordnoun is quite full; $tavern.diversity, and the owner is clearly enjoying the amount of business $bartender.hisher $tavern.wordnoun is receiving.", "It must be peak hour for the $tavern.wordnoun. The barmaid is running back and forth between customers and the kitchen, trying desperately to keep ontop of the ever growing requests for more ale.")>>
	<<elseif $tavern.populationroll gt 40 && $tavern.roughnessroll gt 60>>
			<<print either("The clientele is pretty rough, and might have scared off some of the less rambunctious potential customers.  $tavern.diversity", "There's a fair number of people in the $tavern.wordnoun with quite a few swords on display. $tavern.diversity")>>
	<<elseif $tavern.populationroll gt 40>>
			<<print either("There's a reasonable amount of customers in the $tavern.wordnoun. $tavern.name's barmaid is happily walking back and forth from the kitchen, taking out plates as they are delivered.", "There's a decent number of people in $tavern.name, and you manage to find a seat without too much trouble. $tavern.diversity")>>
	<<elseif $tavern.populationroll lte 40 && $tavern.roughnessroll gt 60>>
			<<print either("The few people that are in the tavern bear scars, and openly talk of their violent exploits. It's pretty clear that they have scared away any regular clientele. $tavern.diversity", "There are basically no people in the tavern, save for a few battle-hardened men talking in the corner.", "There's not very many customers in $tavern.name at the moment. You see a couple of adventurers hunked over in the corner, quietly discussing battle plans, but nothing of particular interest in the clientele.")>>
	<<elseif $tavern.populationroll gt 30>>
			<<print "$tavern.name is basically empty, and there's not much for the $tavern.wordnoun<<nobr>>'s<</nobr>> barmaid to do.">>
	<<elseif $tavern.populationroll lte 30>>	
			<<print "It's almost just you and the bartender in here.">>
<</if>>

<<set _brawl to random(1, 100)>>
	<<if $tavern.populationroll gt 80>>
		<<set _brawl += 15>>
	<<elseif $tavern.populationroll gt 70>>
		<<set _brawl += 13>>
	<<elseif $tavern.populationroll gt 60>>
		<<set _brawl += 11>>
	<<elseif $tavern.populationroll gt 60>>
		<<set _brawl += 8>>
	<<elseif $tavern.populationroll gt 50>>
		<<set _brawl += 0>>
	<<elseif $tavern.populationroll gt 40>>
		<<set _brawl -= 5>>
	<<elseif $tavern.populationroll gt 30>>
		<<set _brawl -= 15>>	
	<<elseif $tavern.populationroll gt 20>>
		<<set _brawl -= 20>>	
	<<elseif $tavern.populationroll lte 20>>
		<<set _brawl -= 40>>
<</if>>
	<<if $tavern.roughnessroll gt 80>>
		<<set _brawl += 15>>
	<<elseif $tavern.roughnessroll gt 70>>
		<<set _brawl += 13>>
	<<elseif $tavern.roughnessroll gt 60>>
		<<set _brawl += 11>>
	<<elseif $tavern.roughnessroll gt 60>>
		<<set _brawl += 8>>
	<<elseif $tavern.roughnessroll gt 50>>
		<<set _brawl += 0>>
	<<elseif $tavern.roughnessroll gt 40>>
		<<set _brawl -= 5>>
	<<elseif $tavern.roughnessroll gt 30>>
		<<set _brawl -= 15>>	
	<<elseif $tavern.roughnessroll gt 20>>
		<<set _brawl -= 20>>	
	<<elseif $tavern.roughnessroll lte 20>>
		<<set _brawl -= 40>>
<</if>>

<</nobr>>


:: Intrigue
<<nobr>>
<<linkreplace "<h4>Anything interesting in $tavern.name?</h4>" t8n>><h4>Interesting things in $tavern.name...</h4>

<<set _rollintrigue to random(1, 4)>>
		<<if _rollintrigue is 1>>
			<<include "PlotHookRumour">>
		<<elseif _rollintrigue is 2>>
			<<include "PlotHookRumour">>
		<<elseif _rollintrigue is 3>>
			<<include "PlotHookPaper">>
		<<elseif _rollintrigue is 4>>
			<<include "PlotHookPeople">>
		<<elseif _rollintrigue is 5>>
			<<include "PlotHookThings">>
<</if>>
<<include "ShitPlotHookGenerator">>
<</linkreplace>><</nobr>>


:: PlotHookPeople
You wander around the $tavern.wordnoun, and eventually find yourself in conversation with a $plotguy.height, $plotguy.weight $plotguy.gender who introduces $plotguy.himher<<nobr>>self<</nobr>> as $plotguy.name<<nobr>>.<</nobr>> You can't help but notice $plotguy.firstname has a <<print $plotguy.physicaltrait>>. You explain that you are adventurers, looking for work or otherwise profitable endeavours, and $plotguy.hisher $plotguy.eyes eyes light up, and $plotguy.firstname draws you closer, and whispers in a hushed tone 'I may have something of interest for you, in that case; <<print $plothook.people.random()>>'


:: PlotHookThings
To be added.


:: PlotHookPaper
You see a noticeboard next to the $tavern.wordnoun's $tavern.structure bar. Walking over to it, you see a number of barter requests nailed to the noticeboard; simple things like 'have chook, want grain', 'have grain, want chook'. One catches your eye, though; it reads '<<print $plothook.paper.random()>>'


:: PlotHookRumour
<<nobr>>
<<set _PlotHookRumourRoll to random(1, 2)>>
<<if _PlotHookRumourRoll is 1>>
	You make your way around the $tavern.wordnoun, and chat with a couple of the locals. They are friendly enough for simple $town.type folk, and are happy to share a drink with you, and gossip easily- apparently, $bartender.name $bartender.trait<<nobr>>.<</nobr>> When you steer the conversation towards rumours that they've heard, the half-drunk <<print either("man", "woman")>> looks around, and in a hushed voice, whispers
	<<elseif _PlotHookRumourRoll is 2>>
You talk amongst the good folk of $town.name, who seem pleasant enough. They gossip easily, and reckon that $tavern.name is only known for its $tavern.draw, and that the pub across the road is totally way better. You steer the conversation towards topics that are more interesting to adventurers such as yourselves, and the drunk <<print $npc.weight.random()>> <<print either("man", "woman", "person whose gender you can't quite pin down")>> looks around, and whispers in a hushed voice
<</if>>

<</nobr>> '<<print $plothook.rumour.pluck()>>'


:: PlotHook
<<set $plothook to {
	people: ["I overheard from two servants that they plan to poison the Lord of $town.name! I've tried to get in to his grounds, but the doorguard won't listen to me because I'm just a nobody... Please, save him!", 
	"There's a tournament coming up, not far from here. We need strong, trustworthy people as the Lord of $town.name's security detail.", "There's a bard, of great renown that lives not far from $town.name- perhaps you know of him, the Great <<print $name.man.pluck()>>? Well, last week, thieves broke in to the Songsmith's mansion, but the only thing that the scoundrels took was the bard's voice. There's a handsome reward for the return of it, too.", 
	"I know that you are not likely to believe me, but... I am the messenger for the Duke's brother- yes, he had a brother, who has been in exile for some time. I've been charged to deliver this letter to the Duke, but I fear that I'm being followed and may meet my fate soon; the exact details are better left unknown, lest you make yourself a permanent target for holding the knowledge that I do. You must get this message to him. But do not open it, as the Duke will not touch it if the wax seal has been broken.",
	"I'm looking for some guards to help me deliver some cargo some weeks' way away from $town.name; I can't promise that it's going to be easy, but if you keep me and my cargo safe, I can promise rewards well worth your time.",
	"For many years, I've kept in contact with the priest of $town.name, Father <<print $name.man.pluck()>>. But when I visited last spring, he was nowhere to be seen, and $bartender.firstname said that he died last Autumn... I did not mention my trip to $town.name, and yet the letters from him continue.",
	"Many years ago, my sister $npc.woman.pluck() had a child out of wedlock. She loved it dearly, but it passed in the winter. But recently, she's been hearing its cries again, and swears to the Gods that she has seen it waving from in the paddocks, where the child played with the cows."],
	
	
	things: ["Behind the bar of $tavern.name, there's a small rat which you've seen the bartender look directly at, without trying to kill the pest."],
	
	
	rumour: ["The hedge maze in front of the manor has been maintained for decades by a strange elf who speaks in cryptic riddles. Recently, a visiting noble from a nearby kingdom went into the maze and never came out. Everyone who has gone in looking for him has met the same fate...", 
	"A talented sculptor recently did a sculpture for the Lord of $town.name and ever since, the Lord has not been himself- before he remembered all his servants names, and now he merely bark orders... We fear that something happened to him.", 
	"A local tinkerer named Ebonweg has recently gone missing. The locals know him as an honest tradesman; however he was also something of a recluse, whose tinkerings sometimes bordered on the immoral.",
	"There was talk of a group of bandits that had taken up terrorizing the road to the north of $town.name, but I went through there just last week, and there was nought a sound the entire journey."],
	
	
	paper: ["The piece of paper bears large block letters, stating 'WANTED', with an illustration underneath- the faces below bear a remarkable similarity to your own...", 
	"The paper states 'WANTED: DEAD OR ALIVE', with the fine print reading 'For the crimes of theft, robbery, burglary, and arson, the $town.name Bandit is wanted dead or alive.' You ask $bartender.firstname about what the crimes entailed, and apparently there's been a huge rash of thefts of food in $town.name recently, resulting in food shortages. The $town.type's council has hired bounty hunters to catch the criminal."]
}>>


:: Output2 [output]
<<nobr>><<include "Renders">><</nobr>><span class="firstcharacter">Y</span>ou make your way through the $town.type of $town.name until you come to a $tavern.wordnoun, which is called <strong>$tavern.name</strong>, a $tavern.size $tavern.structure tavern that the locals know best for its $tavern.draw.

<h3>The Bar</h3>Behind the counter is who you would assume to be the bartender, a $bartender.racenote who is currently <<print $bartender.idle.random()>>. You walk up to the bar, and strike up conversation with the $bartender.manwoman, who introduces $bartender.himher<<nobr>>self<</nobr>> as $bartender.name, the $bartender.owner of $tavern.name<<nobr>>.<</nobr>> 
<<linkreplace "<h4>Talk with $bartender.name</h4>" t8n>><h3>$bartender.name</h3><<include "BartenderTalk">><</linkreplace>><<include "Menu">><h3>The Tavern</h3><<include "TavernDescription">><<include "LookAround">>

<<print $tavern.patrons.pluck()>> <<print $tavern.entertainment.pluck()>>
<<include "Intrigue">><<include "Rooms">>


:: TavernFlavour
<<set $tavern.fun to ["A group of commoners is playing horse shoes out back.", 
"The party is surprised to find the country darts league in full swing as they enter. The waitresses are used to the chaos and dodge darts easily. The half ogre bouncer is using lawn darts.", 
"A group of Hill Dwarves are in the middle of a drinking contest, and two of them are passed out already. The Prize is a solid platinum stein.", 
"Wet Chainmail contest!", 
"Four large Barbarians are loudly sledging each other during an arm wrestling competition.", 
"A shy teenage girl is reciting bad poetry in a corner. No one is paying the slightest bit of attention to her.", 
"It's trivia night! Those scholars from the School of History and the Arts at the University always win, but tonight, we represent and the School of Alchemy will show those smug book-snobs what it means to be a nerd.", 
"A promoter is working his way around the tables looking for challengers to fight the local champion pugilist.", 
"It's a sausage fest! The place is packed with dwarves eager to devour the all-you-can-eat sausage special.", 
"An over-sized brute is arm-wrestling crushing the hand of everyone in sight.", 
"Some goblins are throwing dice with some animated skeletons at a table in the corner.", 
"A goblin is doing a poor job at cheating at a dice game, while a skeleton is doing an excellent job at cheating.", 
"A 7'2 red dragonborn with a 5' bastard sword is having a drinking contest with a dwarf. The dragonborn has a 4-pint tankard, and is almost managing to keep pace.", 
"A party sits in the corner booth playing cards. All of them are cheating, except the paladin, who, curiously, is winning.", 
"A mountain of a man in barbarian leathers is arm wrestling a small dragon and winning.", 
"An awakened Roper is winning two games of billiards at once.", 
"A group of drunken pixies is playing hide and seek by hiding behind patrons.", 
"The players have stumbled into a regional card championship being held that night. The buy in is huge but so is the pot.", 
"A shady looking gnomish inventor is proudly showing off his latest invention. He calls it a one armed bandit.", 
"A grey haired story teller is sitting near the fire holding a contest. He'll give a large purse for a story he hasn't heard yet, but so far no one has won."]>>

<<set $tavern.entertainment to [
	"A bard is telling a story about the player’s latest act of daring do. He’s embellishing quite a bit. When he recognizes the party he makes a big spectacle.", 
	"A bard is telling the story of the player’s latest exploit. It’s an obvious character assassination.", 
	"A local bardic group, The Rolling Boulders, are performing, and a large crowd of drunken groupies will not stop screaming.", 
	"A beggar offers to sing for a few coppers. You heard him singing to the last table. He's awful.", 
	"A sassy fortune teller has set up shop in a corner booth. She informs you that she sees a hangover in your near future.", 
	"A stirring rendition of 'The Lady and the Faerie Dragon' has the crowd calling for an encore from the minstrels.", 
	"The lute-player catches some undergarments from the crowd and drapes them across the ridiculous horned helm he wears.", 
	"On stage tonight: The Deep Tones. A quartet of dwarves with long beards and deep voices singing a capella favorites from places without light (or proper music).", 
	"On stage tonight: Shaela Windspeaker. An elf-maid singer-songwriter with a bit of a whiny voice who is slowly making her way through her most recent song of protest against the previous and the present centuries of war.", 
	"A nervous show-wizard on the small stage is doing tricks with Prestidigitation for the un-amused patrons.", 
	"There is a pair of musicians warbling well known drinking songs. They have made an impromptu stage out of several tables. One of them seems to be tilting precariously."]>>
	
<<set $tavern.patrons to ["A poor farmer is trying to pay his bar tab with a sack of potatoes and a barrel of pickles.", 
	"A sea captain has set up shop at a table and is trying to sell mementos and souvenirs from his latest great voyage of exploration. Birds, exotic coins, tiny mermaids, he has it all. Some of it looks fake though. A tiny bit looks disturbingly real.", 
	"A ranger sits alone in a corner, smoking. A hood covers most of his face. At his feet is a sleeping wolfhound. Everyone is giving him a wide berth.", 
	"A lone Troll is drinking at the end of the bar and softly crying and singing one country ballad after another.", 
	"A stoned magician is fumbling his way through one awful card trick after another.", 
	"A mixed group of Elves are drinking bad wine and holding scented handkerchiefs up to their noses to keep out the stench. One has an obsidian bow strapped to her back.", 
	"Two guards are arguing at a table over who the captain likes more by comparing almost identical spears and claiming to have the better one.", 
	"A sad clown is drinking a beer alone.", 
	"A handsome young woman is holding court among some of her would-be suitors. Her father interrupts, and she stalks off embarrassed.", 
	"Some idiot is having a stag night. His friends are loud and obnoxiously harassing the barmaids.", 
	"It's ladies night! And it's not disappointing... A few pretty little things from the weavers' guild are here, a couple of attractive healers from the temple, and the beautiful new town librarian.", 
	"A surly old witch is drinking sherry while stroking the fat grey cat sitting on her lap.", 
	"The barmaid is a marilith, mixing up four drinks at a time.", 
	"The barmaid is a succubus, she seems to be making great tips.", 
	"The attendant in the bathroom is a foul-smelling zombie. He offers you a mint crystal.", 
	"Behind the bar is a gnomish alchemist with a penchant for mixology experiments.", 
	"The toothless mop-hand reminisces with a hobgoblin military has-been over ales about how an otyugh in the loo isn't as bad as the time a carrion crawler was in there.", 
	"The barmaid is a doppelganger. When she returns to your table with your drinks she has taken the form of one of your party.", 
	"A fat priest is doing an excellent jiggly dance in rhythm with the music. Either that or a gelatinous cube has made it's way onto the dance floor?"]>>


:: BartenderTalk
$bartender.name looks <<print $npc.currentmood.random()>>, and is idly <<print $npc.idle.random()>>, until you start talking with the $bartender.height $bartender.manwoman, who looks pleased with the welcome distraction from the patrons, who $bartender.heshe tells you are for the most part a <<print $tavern.sin>> lot. You talk about the regular goings on in $town.name, and $tavern.name, and $bartender.firstname says "<<nobr>>

<<set _shortage to random(1, 10)>>
	<<if $tavern.wealthroll gt 80>>
		<<set _shortage += 2>>
	<<elseif $tavern.wealthroll gt 60>>
		<<set _shortage += 1>>
	<<elseif $tavern.wealthroll lt 40>>
		<<set _shortage -= 1>>
	<<elseif $tavern.wealthroll lte 20>>
		<<set _shortage -= 2>>
<</if>>

<<if _shortage gt 7, $tavern.populationroll gt 70>>
		<<print either("We're lucky that I bought that extra case of grog... I get the feeling that we're gonna need it.", 
		"I'm glad that Breiga kept an eye on the stock levels, otherwise we'd have sold out of <<print $tavern.shortages.pluck()>>")>>
	<<elseif _shortage gt 7>>
		<<print either("Business is alright, in honesty I think that I prefer running out of supplies than not... At the moment, it looks like I'll not be running out any time soon.", "I think that I may have oversupplied on <<print $tavern.shortages.pluck()>>...")>>
	<<elseif _shortage gt 4>>
		<<print either("We've currently got a bit of a shortage of <<print $tavern.shortages.pluck()>>, but hopefully we'll be getting a cartload overmorrow.", 
"We're currently running out of <<print $tavern.shortages.pluck()>>, but with any luck, we'll be getting some more before the night is out.", 
"I don't know how it happened, but we're running out of <<print $tavern.shortages.pluck()>><<nobr>>...<</nobr>> To be honest, I reckon the barmaid is to blame.", 
"I swear that I ordered a cartload last week, but I'll be damned if we're not running low on <<print $tavern.shortages.pluck()>> somehow.", 
"I told <<print $name.woman.pluck()>> to order some, but wouldn't you know, I find myself low on <<print $tavern.shortages.pluck()>>!")>>
	<<elseif _shortage lte 4, $tavern.population gt 70>>
		<<print either("Things are honestly in a mess at the moment around the $tavern.name, we've got a full house, and I'm low on <<print $tavern.shortages.pluck()>> AND <<print $tavern.shortages.pluck()>>! How does that even happen!?", "You can tell that business is booming, but there's only one more case of <<print $tavern.shortages.pluck()>>, and we're completely out of <<print $tavern.shortages.pluck()>>!")>>
	<<elseif _shortage lte 4, $tavern.populationroll lt 40>>
		<<print either("Well, you can probably guess that business isn't the best right at this moment. Maybe the lack of <<print $tavern.shortages.pluck()>> has something to do with it...", "Business is slow, I'm not gonna lie. We've had no cartments of <<print $tavern.shortages.pluck()>> for almost a week, certainly isn't helping things.")>>
	<<elseif _shortage lte 4>>
		<<print "Well, business could be better. We've got a bit of a shortage on <<print $tavern.shortages.pluck()>>, and that certainly can't be helping things, but I suppose there's always some bad days; they're just not spending the coin, is all.">>
<</if>>

<</nobr>>
<<linkreplace "Talk more with $bartender.name" t8n>>
$bartender.firstname tells you that the patrons are $tavern.diversity, and that $bartender.heshe <<print either("loves working in $tavern.name", "hates working in $tavern.name", "finds working in the $tavern.wordnoun boring", "finds working in the $tavern.wordnoun fun")>>. $bartender.firstname says "Before I took over $tavern.name, I was a <<print $npc.class.random()>>, and damn good at it. But that was a long time ago... The only thing that bonds me to the past now? <<print $npc.bond.pluck()>>'
<</linkreplace>>
<<linkreplace "Anything interesting been happening lately?" t8n>>
'Well...<<print $plothook.rumour.pluck()>>'
<</linkreplace>>


:: Rooms
<<nobr>><<if $tavern.sizeroll gt 80>>
		<<set _freerooms to random(6, 10)>>
	<<elseif $tavern.sizeroll gt 60>>
		<<set _freerooms to random(5, 9)>>
	<<elseif $tavern.sizeroll gt 40>>
		<<set _freerooms to random(4, 8)>>
	<<elseif $tavern.sizeroll gt 20>>
		<<set _freerooms to random(3, 6)>>	
	<<elseif $tavern.sizeroll lte 20>>
		<<set _freerooms to random(2, 4)>>	
<</if>>
<<if $tavern.populationroll gt 80>>
		<<set _freerooms -= 3>>
	<<elseif $tavern.populationroll gt 60>>
		<<set _freerooms -= 2>>
	<<elseif $tavern.populationroll gt 40>>
		<<set _freerooms -= 1>>
	<<elseif $tavern.populationroll gt 20>>
		<<set _freerooms += 2>>	
	<<elseif $tavern.populationroll lte 20>>
		<<set _freerooms += 3>>
<</if>>
<<if _freerooms lte 0>>
		<span id="room-cost"><<print "You talk with the barmaid about lodgings, and she says that there are no free rooms in $tavern.name at the moment...">></span>
	<<elseif _freerooms == 1>>
		<<linkreplace "<h4>Rent a room for the night</h4>" t8n>>
		<<replace "#room-cost">><<include "Sleep">><</replace>>
		<</linkreplace>>
		<span id="room-cost"><<print "$tavern.name has just one available room, which is $tavern.size and $tavern.bedcleanliness. Because this $tavern.wordnoun is priced for $tavern.wealth patrons, it will cost <<money $tavern.lodging>> to stay here for the night.">></span>	
	<<elseif _freerooms gt 1>>
		<<linkreplace "<h4>Rent a room for the night</h4>" t8n>>
		<<replace "#room-cost">><<include "Sleep">><</replace>>
		<</linkreplace>>
		<span id="room-cost"><<print "$tavern.name has _freerooms available rooms, which are $tavern.size and $tavern.bedcleanliness. Because this $tavern.wordnoun is priced for $tavern.wealth patrons, it will cost <<money $tavern.lodging>> to stay here for the night.">></span>
<</if>><</nobr>>


:: Sleep
<<nobr>>
<<set _restfulness to random(1, 100)>>
<<set _sleepeasy to 0>>
	<<if $tavern.wealth is "kingly">>
		<<set _restfulness += 30, _sleepeasy += 3>>
	<<elseif $tavern.wealth is "aristocratic">>
		<<set _restfulness += 15, _sleepeasy += 2>>
	<<elseif $tavern.wealth is "wealthy">>
		<<set _restfulness += 7, _sleepeasy += 1>>
	<<elseif $tavern.wealth is "modest">>
		<<set _restfulness -= 2>>
	<<elseif $tavern.wealth is "poor">>
		<<set _restfulness -= 5, _sleepeasy -= 2>>
	<<elseif $tavern.wealth is "squalid">>
		<<set _restfulness -= 10, _sleepeasy -= 3>>
<</if>>
<<if $tavern.cleanlinessroll gt 90>>
  <<set _restfulness += 30>>
	  <<elseif $tavern.cleanlinessroll gt 80>>
		  <<set _restfulness += 15, _sleepeasy += 3>>
	  <<elseif $tavern.cleanlinessroll gt 70>>
		  <<set _restfulness += 5, _sleepeasy += 2>>
	  <<elseif $tavern.cleanlinessroll gt 60>>
		  <<set _restfulness += 3, _sleepeasy += 1>>
	  <<elseif $tavern.cleanlinessroll gt 50>>
		  <<set _restfulness -= 2>>
	  <<elseif $tavern.cleanlinessroll gt 40>>
		  <<set _restfulness -= 5>>
	  <<elseif $tavern.cleanlinessroll gt 30>>
		  <<set _restfulness -= 10, _sleepeasy -= 1>>
	  <<elseif $tavern.cleanlinessroll gt 20>>
		  <<set _restfulness -= 15, _sleepeasy -= 2>>
	  <<elseif $tavern.cleanlinessroll lte 20>>
		  <<set _restfulness -= 20, _sleepeasy -= 3>>		  
<</if>>

<<if $tavern.bedcleanlinessroll gt 90>>
  <<set _restfulness += 30>>
	  <<elseif $tavern.bedcleanliness is "perfectly prepared, with fresh sheets and a lemon scent in the air of the room">>
		  <<set _restfulness += 30, _sleepeasy += 3>>
	  <<elseif $tavern.bedcleanliness is "freshly cleaned and neat">>
		  <<set _restfulness += 20, _sleepeasy += 2>>
	  <<elseif $tavern.bedcleanliness is "tidy and neat">>
		  <<set _restfulness += 15, _sleepeasy += 1>>
	  <<elseif $tavern.bedcleanliness is "reasonably clean">>
		  <<set _restfulness += 10>>
	  <<elseif $tavern.bedcleanliness is "somewhat tidy">>
		  <<set _restfulness += 5>>
	  <<elseif $tavern.bedcleanliness is "disgusting">>
		  <<set _restfulness -= 10, _sleepeasy -= 1>>
	  <<elseif $tavern.bedcleanliness is "teeming with rats">>
		  <<set _restfulness -= 20, _sleepeasy -= 2>>
	  <<elseif $tavern.bedcleanliness is "festering with bugs">>
		  <<set _restfulness -= 30, _sleepeasy -= 3>>		  
<</if>>

<<if _restfulness gt 90, _sleepeasy gte 2>>
		You unsurprisingly get an excellent night's sleep, and awake feeling refreshed and reinvigorated<span id="sleeptype">.</span>
	<<elseif _restfulness gt 90, _sleepeasy lte -2>>
		You surprisingly get an excellent night's sleep, and awake feeling refreshed and reinvigorated<span id="sleeptype">.</span>
	<<elseif _restfulness gt 90>>
		You get an excellent night's sleep, and awake feeling refreshed and reinvigorated<span id="sleeptype">.</span>
	<elseif _restfulness gt 80, _sleepeasy gte 2>>
		You unsurprisingly get a great night's sleep, and awake feeling refreshed and reinvigorated<span id="sleeptype">.</span>
	<<elseif _restfulness gt 80, _sleepeasy lte -2>>
		You surprisingly get a great night's sleep, and awake feeling refreshed and reinvigorated<span id="sleeptype">.</span>
	<<elseif _restfulness gt 70, _sleepeasy gte 2>>
		You unsurprisingly get a good night's sleep, and awake feeling refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 70, _sleepeasy lte -2>>
		You surprisingly get a good night's sleep, and awake feeling refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 70>>
		You get a good night's sleep, and awake feeling refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 50, _sleepeasy gte 2>>
		You get an alright night's sleep, which is disappointing considering the quality of $tavern.name, but you awake feeling reasonably refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 50, _sleepeasy lte -2>>
		You get an alright night's sleep despite the poor quality of $tavern.name, but you awake feeling reasonably refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 50>>
		You get an alright night's sleep, and awake feeling reasonably refreshed<span id="sleeptype">.</span>
	<<elseif _restfulness gt 30, _sleepeasy gte 2>>
		You get an awful night's sleep, which is disappointing considering the quality of $tavern.name, and awake with a sore back; it might have been how you were sleeping, or the bed, but you feel pretty awful<span id="sleeptype">.</span>
	<<elseif _restfulness gt 30, _sleepeasy lte -2>>
		You get an awful night's sleep, which is unsurprising considering the quality of $tavern.name, and awake with a sore back; it might have been how you were sleeping, or the bed, but you feel pretty awful<span id="sleeptype">.</span>
	<<elseif _restfulness gt 30>>
		You get an awful night's sleep, and awake with a sore back; it might have been how you were sleeping, or the bed, but you feel pretty awful<span id="sleeptype">.</span>
	<<elseif _restfulness lte 30, _sleepeasy gte 2>>
		The night seems to go on forever, and you just can't get to sleep, despite the comforts provided. You awake in the morning to the roosters outside, and feel groggy, and not at all rested<span id="sleeptype">.</span>
	<<elseif _restfulness lte 30, _sleepeasy lte -2>>
		The night seems to go on forever, and you just can't get to sleep, probably due to the disgusting conditions that you were expected to sleep in. You awake in the morning to the roosters outside, and feel groggy, and not at all rested<span id="sleeptype">.</span>
	<<elseif _restfulness lte 30>>
		The night seems to go on forever, and you just can't get to sleep. You awake in the morning to the roosters outside, and feel groggy, and not at all rested<span id="sleeptype">.</span>	
	<<else>>
		<<print "It's a regular sort of sleep, and you awake feeling reasonably refreshed">>
<</if>>
<<switch $tavern.type>>
	<<case "brothel">>
		<<prepend "#sleeptype">>in spite of the whores moaning<</prepend>>
	<<case "gambling den">>
		<<prepend "#sleeptype">>in spite of the commotion whenever something interesting happened at the gambling tables<</prepend>>
<</switch>>

<<if $tavern.wealth is "kingly">>
		<<print "In the morning, you're awakened to a knock on the door; apparently $tavern.name comes with a complimentary breakfast in bed. You get dressed and open the door, and one of the barmaids comes in wheeling a trolley, upon which is laden with toast, fruits, cured meats, porridge, and all kinds of cheeses with breads.">>
	<<elseif $tavern.wealth is "aristocratic">>
		<<print "In the morning, you're awakened to the sound of a bell. Going downstairs to the bar area, you see that a continental breakfast has been set out for you. $bartender.name is standing behind the counter, pouring a beer which $bartender.heshe hands to you, asking if you slept well.">>
	<<elseif $tavern.wealth is "wealthy">>
		<<print "When you wake, you pack your things and head downstairs to see that $bartender.name is waiting there, in case you wanted any breakfast before you left; $bartender.heshe says that there's hot porridge, breads and cheeses, and fruit if you'd like to pay the nominal fee of one silver for the breakfast.">>
	<<elseif $tavern.wealth is "modest">>
		<<print "You head down after packing your things, and see that $bartender.name is sitting at one of the benches, chewing on a hunk of bread with cheese. The $bartender.weight $bartender.manwoman nods at you, and pauses, finishing chewing. When $bartender.heshe does finish, $bartender.heshe tells you that there's some bread and cheese left, if you want to pay the three copper for it.">>
	<<elseif $tavern.wealth is "poor">>
		<<print either("You make your way down out of the $tavern.wordnoun and see $bartender.name has fallen asleep at a bowl of porridge. From the kitchen, you can smell something burning", "You make your way down, and as you're leaving $tavern.name, you accidentally knock a cup over. From behind the bar, you hear $bartender.firstname yell out obscenities at you for disturbing $bartender.hisher slumber.", "You start to make your way out of $tavern.name, careful not to disturb the patrons that have fallen asleep at their tables", "You smell something burning, and make your way down to check; when you get down to the kitchen of $tavern.name, you find $bartender.firstname sitting, chewing angrily over a bowl of burnt porridge.")>>
	<<elseif $tavern.wealth is "squalid">>
		<<print either("You start to make your way out of the filthy $tavern.wordnoun, and smell something burning, and make your way down to check; when you get down to the kitchen of $tavern.name, you find $bartender.firstname sitting, chewing angrily over a bowl of burnt porridge.", "You can't help but shake the feeling that there's a smell clinging to your clothes after staying the night at $tavern.name.")>>
<</if>>
<</nobr>>


:: ShitPlotHookGenerator
/*<<linkreplace "They need yet ANOTHER plot hook?" t8n>>
	<<print $shitplothooks.pluck()>>
<</linkreplace>> */


:: Output3 [output]
<<nobr>><<include "Renders">><</nobr>><span class="firstcharacter">Y</span>ou walk through the $town.type of $town.name, and eventually come to <strong>$tavern.name</strong>; a $tavern.structure $tavern.wordnoun which is known in the area for its $tavern.draw, and <<nobr>>

<<if $tavern.type is "regular">>
		<<print "its <<print $tavern.sin>> patrons.">>
	<<elseif $tavern.type isnot "regular">>
		<<print "for being a $tavern.type, with $tavern.sin patrons.">>
<</if>><</nobr>> 

<<include "TavernDescription">>

<h3>The Bar</h3>Behind the $tavern.structure bar is a $bartender.racenote who you assume is the owner of the establishment; $bartender.heshe is currently <<print $bartender.idle.pluck()>>. You walk up to the bar, and introduce yourselves, and $bartender.heshe reciprocates; $bartender.heshe is $bartender.name, the $bartender.owner of $tavern.name.
<<linkreplace "<h4>Talk with $bartender.name</h4>" t8n>><h3>$bartender.name</h3><<include "BartenderTalk">><</linkreplace>><<include "Menu">><h3>The Tavern</h3><<include "LookAround">> <<print $tavern.entertainment.pluck()>> <<include "Intrigue">><<include "Rooms">>


:: ReputationDescriptor
<<nobr>><<if $tavern.type == "regular">>
		<<print "just a regular inn, known">>
	<<else>>
		<<print $tavern.reputation>>
<</if>><</nobr>>


:: Submission Form
<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSekxPe31_N0dzBiE_4CpqAXTQzJoH_XUQcxV2O1C35UsVXvEw/viewform?embedded=true" width="760" height="500" frameborder="0" marginheight="0" marginwidth="0">Loading...</iframe>


:: Renders
<<nobr>>
/* ------------------------- WEALTH -------------------------- */
<<if $tavern.wealthroll gt 95>>
		<<set $tavern.wealth to "kingly", $tavern.lodging = 800, $tavern.food = 400>>
	<<elseif $tavernwealthroll gt 80>>
		<<set $tavern.wealth to "aristocratic", $tavern.lodging = 400, $tavern.food = 200>>
	<<elseif $tavernwealthroll gt 70>>
		<<set $tavern.wealth to "wealthy", $tavern.lodging = 200, $tavern.food = 80>>
	<<elseif $tavernwealthroll gt 60>>
		<<set $tavern.wealth to "comfortable", $tavern.lodging = 50, $tavern.food = 40>>
	<<elseif $tavernwealthroll gt 50>>
		<<set $tavern.wealth to "modest", $tavern.lodging = 30, $tavern.food = 30>>
	<<elseif $tavernwealthroll gt 25>>
		<<set $tavern.wealth to "poor", $tavern.lodging = 10, $tavern.food = 6>>
	<<elseif $tavernwealthroll lte 25>>
		<<set $tavern.wealth to "squalid", $tavern.lodging = 7, $tavern.food = 3>>
<</if>>

/* ------------------------- SIZE -------------------------- */
<<if $tavern.sizeroll gt 80>>
		<<set $tavern.size to "huge">>
	<<elseif $tavern.sizeroll gt 60>>
		<<set $tavern.size to "large">>
	<<elseif $tavern.sizeroll gt 40>>
		<<set $tavern.size to "medium">>
	<<elseif $tavern.sizeroll gt 20>>
		<<set $tavern.size to "small">>
	<<elseif $tavern.sizeroll lte 20>>
		<<set $tavern.size to "tiny">>
<</if>>

/* ------------------------- ROUGHNESS -------------------------- */

	<<if $tavern.roughnessroll gt 80>>
		<<set $tavern.roughness to "bloodthirsty">>
	<<elseif $tavern.roughnessroll gt 60>>
		<<set $tavern.roughness to "rough">>
	<<elseif $tavern.roughnessroll gt 50>>
		<<set $tavern.roughness to "alright">>
	<<elseif $tavern.roughnessroll gt 40>>
		<<set $tavern.roughness to "placid">>
	<<elseif $tavern.roughnessroll gt 30>>
		<<set $tavern.roughness to "calm">>
	<<elseif $tavern.roughnessroll gt 20>>
		<<set $tavern.roughness to "tranquil">>
	<<elseif $tavern.roughnessroll lte 20>>
		<<set $tavern.roughness to "utterly serene">>
<</if>>

/* ------------------------- CLEANLINESS -------------------------- */

	<<if $tavern.cleanlinessroll gt 80>>
		<<set $tavern.cleanliness to "absolutely spotless", $tavern.bedcleanliness to "perfectly prepared, with fresh sheets and a lemon scent in the air of the room">>
	<<elseif $tavern.cleanlinessroll gt 70>>
		<<set $tavern.cleanliness to "spotless", $tavern.bedcleanliness to "freshly cleaned and neat">>
	<<elseif $tavern.cleanlinessroll gt 60>>
		<<set $tavern.cleanliness to "hygienic", $tavern.bedcleanliness to "tidy and neat">>
	<<elseif $tavern.cleanlinessroll gt 50>>
		<<set $tavern.cleanliness to "decently hygienic", $tavern.bedcleanliness to "reasonably clean">>
	<<elseif $tavern.cleanlinessroll gt 40>>
		<<set $tavern.cleanliness to "slightly grubby", $tavern.bedcleanliness to "somewhat tidy">>
	<<elseif $tavern.cleanlinessroll gt 30>>
		<<set $tavern.cleanliness to "quite dirty", $tavern.bedcleanliness to "disgusting">>
	<<elseif $tavern.cleanlinessroll gt 20>>
		<<set $tavern.cleanliness to "rather filthy", $tavern.bedcleanliness to "teeming with rats">>
	<<elseif $tavern.cleanlinessroll lte 20>>
		<<set $tavern.cleanliness to "absolutely putrid", $tavern.bedcleanliness to "festering with bugs">>
<</if>>


/* ------------------------- SIN -------------------------- */

	<<if $tavern.sinroll gt 80>>
		<<set $tavern.sin to "corrupt">>
	<<elseif $tavern.sinroll gt 70>>
		<<set $tavern.sin to "venal">>
	<<elseif $tavern.sinroll gt 60>>
		<<set $tavern.sin to "sleazy">>
	<<elseif $tavern.sinroll gt 50>>
		<<set $tavern.sin to "seedy">>
	<<elseif $tavern.sinroll gt 40 && $tavern.roughness gt 60>>
		<<set $tavern.sin to "surprisingly trustworthy">>
	<<elseif $tavern.sinroll gt 40>>
		<<set $tavern.sin to "trustworthy">>
	<<elseif $tavern.sinroll gt 30 && $tavern.roughness gt 60>>
		<<set $tavern.sin to "surprisingly reliable">>
	<<elseif $tavern.sinroll gt 30>>
		<<set $tavern.sin to "reliable">>	
	<<elseif $tavern.sinroll lte 20 && $tavern.roughness gt 60>>
		<<set $tavern.sin to "surprisingly honest">>
	<<elseif $tavern.sinroll lte 20>>
		<<set $tavern.sin to "honest">>
	<<else>>
		<<set $tavern.sin to "reasonably trustworthy">>
<</if>>


/* ------------------------- DIVERSITY -------------------------- */

	<<if $tavern.diversityroll gt 80>>
		<<set $tavern.diversity to "a very diverse crowd, with no clear majority of one race">>
	<<elseif $tavern.diversityroll gt 70 && $tavern.roughnessroll gt 70>>
		<<set $tavern.diversity to "a rather diverse crowd, the only common factor being their love of weaponry">>
	<<elseif $tavern.diversityroll gt 70>>
		<<set $tavern.diversity to "a rather diverse crowd">>
	<<elseif $tavern.diversityroll gt 60>>
		<<set $tavern.diversity to "a pretty diverse crowd, the majority being $bartender.raceplural">>
	<<elseif $tavern.diversityroll gt 50>>
		<<set $tavern.diversity to "a relatively diverse crowd, the majority being $bartender.raceplural">>
	<<elseif $tavern.diversityroll gt 40>>
		<<set $tavern.diversity to "a pretty diverse crowd, most being $bartender.raceplural">>
	<<elseif $tavern.diversityroll gt 30 && $tavern.roughnessroll gt 70>>
		<<set $tavern.diversity to "$bartender.raceplural, mostly, and it's clear that they like it that way">>	
	<<elseif $tavern.diversityroll gt 30>>
		<<set $tavern.diversity to "$bartender.raceplural for the most part">>
	<<elseif $tavern.diversityroll gt 20 && $tavern.roughnessroll gt 70>>
		<<set $tavern.diversity to "mostly $bartender.raceplural, and it's very obvious that they like it that way">>
	<<elseif $tavern.diversityroll gt 20>>
		<<set $tavern.diversity to "mostly $bartender.raceplural">>
	<<elseif $tavern.diversityroll lte 20 && $tavern.roughnessroll gt 70>>
		<<set $tavern.diversity to "almost all $bartender.raceplural, and they are extremely hostile to non-$bartender.raceplural">>
	<<elseif $tavern.diversityroll lte 20>>
		<<set $tavern.diversity to "next to all are $bartender.raceplural">>
<</if>>


/* ------------------------- REPUTATION -------------------------- */

<<if $tavern.reputationroll gt 80>>
		<<set $tavern.reputation to "famous">>
	<<elseif $tavern.reputationroll gt 60>>
		<<set $tavern.reputation to "well known">>
	<<elseif $tavern.reputationroll gt 40>>
		<<set $tavern.reputation to "famous-ish">>
	<<elseif $tavern.reputationroll gt 20>>
		<<set $tavern.reputation to "reviled">>
	<<elseif $tavern.reputationroll lte 20>>
		<<set $tavern.reputation to "infamous">>
<</if>>
<</nobr>>


:: SpecialBrew
<<set $specialbrew to either([
	{
	name: "Gnollblood",
	type: "non-magical mead",
	cost: 30,
	description: "While the inventor of this recipe is said to have been human, anyone is welcome to make it- if they can survive the trial of getting the ingredients. True to its name, after the mead is sweetened with honey and boiled with a blend of spices, the maker stirs in just enough gnoll's blood to give the brew a salty, rusty undertone. This conveys no magical benefit, but it's still quite popular among the wealthy citizens of the local cities. Brewers within the city limits will pay handsomely for fresh gnoll carcasses to keep their blood supply in check.",
	author: "Jasperine"
	},
	
	{
	name: "Bragget",
	type: "goblin 'wine'",
	cost: 34,
	description: "Made from fermented, often rotting cave mushrooms, bragget is the favored drink of any goblin who wants to quickly lose their inhibition. There's no real recipe to follow- simply throw a handful of fresh mushrooms into a vat of water, forget it for several months, rediscover the vat after a crew of adventurers break into your cave system, and drink it. Effects range from a gleeful, giddy state of inebriation to death from dysentery. Or both.",
	author: "Jasperine"
	},
	
	{
	name: "Cobbler's cream",
	type: "rotgut",
	cost: 26,
	description: "Gnomes who dwell along the forest's edge often send their young to forage for meals in dense, semi-cultivated plots filled with berries, brambles, succulent flowers and herbs of all varieties. Having not yet developed a callous thick enough to endure the thorns, prickles and stings, many young Gnomes often wear carved wooden shoes and heavy leather gaiters to protect themselves. When a young Gnome reaches maturity, however, they are expected to retire their shoes back to the cobbler, where the toes are stuffed full of harvested berries, leaves, mushrooms and whatever else comes to hand. The shoes are then hung from the rafters over a large vat, where steam, time, and the natural yeasts in the porous wood allow droplets of alcoholic liquid to seep through the shoe, and fall into the roiling mixture below. Mixed with rainwater, and served in usually cleaned wooden shoes, the resulting beverage is incredibly potent, with a flavor profile that ranges from incredibly profane to lavender, with notes of sweet sap. Gnomes who consume it often do so in celebratory contexts, and in small quantities. Most others experience temporary blindness and an intense hatred for Gnomes.",
	author: "MrKHackworth"
	},
	
	{
	name: "Blood clot",
	type: "Dwarven sludge",
	cost: 42,
	description: "This bizarre concoction is a favorite among Dwarves looking to make a dare. Thick and red, it contains a congealed glob of fermented goat milk about the size of a golf ball. An acquired taste, it is reminiscent of fortified wine with a strong hint of copper.",
	author: "Melance"
	},
	
	{
	name: "Axegrinder Ale",
	type: "Dwarvish ale",
	cost: 34,
	description: "In the right light, this ale takes on a blood red hue. It gives off a strong scent like a floral meadow covered in dew and tastes slightly sour on the way down with a sweaty finish. Dwarves who consume it often become mildly belligerent and take offense the smallest slights. Most others who consume it experience a noticeable uptick in their spirits. Except trolls, who just get angry.",
	author: "OrkishBlade"
	},
	
	{
	name: "Bitterbeard Ale",
	type: "Dwarvish ale",
	cost: 36,
	description: "This translucent gold ale is topped with a clean white foam and tastes a little pungent and bitter with hints of citrus. Dwarves who consume it tend to brood over hated foes, especially 'the one that got away.' Non-dwarves who consume it typically experience a pleasant evening followed by a poor night's sleep.",
	author: "OrkishBlade"
	},
	
	{
	name: "Meadowlark",
	type: "Human wheat beer",
	cost: 30,
	description: "In a world full of 750,000-proof Elven cordials and Dwarven stouts so thick you'd think they were bottled mud, sometimes you just need a good beer. Mild, refreshing, and flavorful, Meadowlark is a beer by humans, for humans, which means that just about every halfling from here to the Drypeak Mountains is drinking it. The noble think it crude, the elves think it unimaginative, the dwarves find it cowardly, but the farmers who drop themselves down at a tavern table at the end of the day wouldn't have anything else.",
	author: "Val_Ritz"
	},
	
	{
	name: "Frostbomb",
	type: "Pale ale",
	cost: 66,
	description: "The life's work of a dragonborn brewmaster. Frostbomb is somewhat disconcerting, for a couple of reasons. One, it's blue. For those who prefer not to consume things that are the color of their cousin Clyde that one time he tried to swallow a carrot whole, that might be a bit of a turn-off. Two, it is absolutely frigid. The steel bottles that it's shipped in are often coated in a thick rime of frost that must be hacked off before serving, and the cold magic in the brew must be allowed to sit for at least four minutes before it's warm enough to not be painful going down. All that being said, there isn't a traveler alive who doesn't hope to stumble upon a bottle under the counter in a desert bar.",
	author: "Val_Ritz"
	},
	
	{
	name: "Steve's Mead",
	type: "Mead",
	cost: 35,
	description: "This bottle of mead might have had a label, once, but it appears to have been torn off. In its place, painted directly on the bottle, are the words 'STEVE'S MEAD' in blocky, crude letters. Clearly, Steve is not around to claim his mead, but in his absence the cork appears to be permanently and irrevocably stuck in the mouth of the bottle.",
	author: "Val_Ritz"
	},

	{
	name: "Self-important Prick",
	type: "Brown ale",
	cost: 36,
	description: "The ale inside this bottle isn't terribly unusual, aside from being harsh and bitter. The true draw is the printing on the bottle, which reads 'Self-Important Prick' in white letters. Under the lettering is a rendition of a face--a rendition that changes to reflect whoever the drinker dislikes the most at that particular time. There are allegations that drinking the ale results in heightened animosity toward the depicted person, but it might just be a result of reminding them that that person exists in the first place.",
	author: "Val_Ritz"
	},
	
	{
	name: "Deep Grog",
	type: "Blackest Tot",
	cost: 44,
	description: "The darkest of naval rum taken from sunken sips mixed with saltwater taken from the pelagic depths of the Elemental Plane of Water. Black and cold, with a syrupy mouth feel. Tastes of brine and molasses with a distinct bitterness. Reserved for first time travelers to The City of Glass, and served as a shot with a still beating fish heart. Also disparagingly known as Aboleth's Piss.",
	author: "twocalf"
	},
	
	{
	name: "Old Polder Genever Gin",
	type: "Spirit's Spirits",
	cost: 49,
	description: "The recipe for this liquor was pulled from the ruins of the necropolis of Polder. Clear or just faintly brown, sweet with juniper and malt. More like a whiskey than a gin. Purportedly aged in oak barrels with a single golden coin taken from the dead city, luck be damned. Said to be able to distract hungry dead by offering shots. Popular gift on Spirt's Eve.",
	author: "twocalf"
	},
		
	{
	name: "Hyperborean Cider",
	type: "Bottled Sunshine",
	cost: 46,
	description: "Fermented with juice made from apples collected from the Celestial Plane. Gloriously, radiantly golden, no head, ever, and never sours. Sweet and warm, with hints of clove, cinnamon, and sunrises. You can still get a hangover, don’t believe that myth, and there are few things in the multiverse worse than being hungover on the Celestial Plane. Everyone is singing and everything IS SO VERY BRIGHT.",
	author: "twocalf"
	},
		
	{
	name: "Airak",
	type: "Djinn and Juice",
	cost: 88,
	description: "Distilled on the Elemental Plane of Air by the Djinn in a process that uses no machinery, but by captive air elementals controlling the temperatures and pressures while the liquid free floats in the air. Clear when poured but will louche when exposed to normal air pressure. Tastes of licorice, anise, and a warm breeze with a slight bitter aftertaste. Makes you lightheaded, maybe literally. Best mixed.",
	author: "twocalf"
	}
])>>


:: Authors
$specialbrew.author


:: Bonds
<<set $npc.bond to ["I would die to recover an ancient artifact of my faith that was lost long ago.", 
"I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.", 
"I owe me life to the priest <<print $name.man.pluck()>> who took me in when my parents died.", 
"Everything I do is for the common people.", 
"I will do anything to protect the temple where I served.", 
"I seek to preserve a sacred text that my enemies consider heretical and seek to destroy.", 
"I fleeced the wrong person, a lord called <<print $name.man.pluck()>>, and must work to ensure that he never crosses paths with me or those I care about.", 
"I owe everything to my mentor <<print $name.man.pluck()>>--a horrible person who's probably rotting in jail somewhere.", 
"Somewhere out there I have a child, litte <<print $name.man.pluck()>>, who doesn't know me. I'm going to try and make the world better for him.", 
"I come from a noble family, and one day I'll reclaim my lands and title from those who stole them from me.", 
"A powerful person, Lord <<print $name.man.pluck()>>, killed someone I love. Some day soon, I'll have my revenge.", 
"I swindled and ruined a person who didn't deserve it, and now I seek to atone for my misdeeds but might never be able to forgive myself.", 
"I'm trying to pay off an old debt I owe to a generous benefactor.", 
"My ill-gotten gains go to support my family.", 
"Something important was taken from me, and I aim to steal it back.", 
"I will become the greatest thief that ever lived.", 
"I'm guilty of a terrible crime. I hope I can redeem myself for it.", 
"Someone I loved died because of a mistake I made. That will never happen again.", 
"My instrument is my most treasured possession, and it reminds me of someone I love.", 
"Someone stole my precious instrument, and someday I'll get it back.", 
"I want to be famous, whatever it takes.", 
"I idolize a hero of the old tales and measure my deeds against that person's.", 
"I will do anything to prove myself superior to my hated rival.", 
"I would do anything for the other members of my old party.", 
"I have a family, but I have no idea where they are.  One day, I hope to see them again.", 
"I worked the land, I love the land, and I will protect the land.", 
"A proud noble once gave me a horrible beating, and I will take my revenge on any bully I encounter.", 
"My tools are symbols of my past life, and I carry them so that I will never forget my roots.", 
"I protect those who cannot protect themselves.",  
"I wish my childhood sweetheart had come with me to pursue my destiny.", 
"The workshop where I learned my trade is the most important place in the world to me.", 
"I created a great work for someone, and then found them unworthy to receive it; I'm still looking for someone worthy.", 
"I owe my guild a great debt for forging me into the person I am today.", 
"I pursue wealth to secure someone's love.", 
"One day I will return to my guild and prove that I am the greatest artisan of them all.", 
"I will get revenge on the evil forces that destroyed my place of business and ruined my livelihood.", 
"Nothing is more important than the other members of my hermitage, order, or association.", 
"I entered seclusion to hide from the ones who might still be hunting me. I must someday confront them.", 
"I'm still seeking the enlightenment I pursued in my seclusion, and it still eludes me.", 
"I entered seclusion because I loved someone I could not have.", 
"Should my discovery come to light, it could bring ruin to the world.", 
"My isolation gave me great insight into a great evil that only I can destroy.", 
"I will face any challenge to win the approval of my family.", 
"My house's alliance with another noble family must be sustained at all costs.", 
"Nothing is more important that the other members of my family.", 
"I am in love with the heir of a family that my family despises.", 
"My loyalty to my sovereign is unwavering.", 
"The common folk must see me as a hero of the people.", 
"My family, clan, or tribe is the most important thing in my life, even when they are far from me.", 
"An injury to the unspoiled wilderness of my home is an injury to me.", 
"I will bring terrible wrath down on the evildoers who destroyed my homeland.", 
"I am the last of my tribe, and it is up to me to ensure their names enter legend.", 
"I suffer awful visions of a coming disaster and will do anything to prevent it.", 
"It is my duty to provide children to sustain my tribe.", 
"It is my duty to protect my students.", 
"I have an ancient text that holds terrible secrets that must not fall into the wrong hands.", 
"I work to preserve a library, university, scriptorium, or monastery.", 
"My life's work is a series of tomes related to a specific field of lore.", 
"I've been searching my whole life for the answer to a certain question.", 
"I sold my soul for knowledge; I hope to do great deeds and win it back.", 
"I'm loyal to my captain first, everything else second.", 
"The ship is most important--crewmates and captains come and go.",  
"I'll always remember my first ship.", 
"In a harbor town, I have a paramour whose eyes nearly stole me from the sea.", 
"I was cheated of my fair share of the profits, and I want to get my due.", 
"Ruthless pirates murdered my captain and crewmates, plundered our ship, and left me to die. Vengeance will be mine.", 
"I would lay down my life for the people I served with.", 
"Someone saved my life on the battlefield. To this day, I will never leave a friend behind.", 
"My honor is my life.", 
"I'll never forget the crushing defeat my company suffered or the enemies who dealt it.", 
"Those who fight beside me are those worth dying for.", 
"I fight for those who cannot fight for themselves.", 
"My town or city is my home, and I'll fight to defend it.", 
"I sponsor an orphanage to keep others from enduring what I was forced to endure.", 
"I owe my survival to another urchin who taught me to live on the streets.", 
"I owe a debt I can never repay to the person who took pity on me.", 
"I escaped my life of poverty by robbing an important person, and I'm wanted for it.", 
"No one else is going to have to endure the hardships I've been through."]>>


:: PlotGuyTalk
You make your way around $tavern.name, and meet a <<print $plotguy.race>>


:: Pickpocket
<<nobr>><<set $npc.pockets to ["5 cp", 
"6 cp", 
"15 cp", 
"22 cp", 
"27 cp", 
"5 sp", 
"5 sp", 
"6 sp", 
"7 sp", 
"2 gp", 
"34 cp and 4 sp",
"12 sp and 7 gp",
"a clove of garlic", 
"a vial of ink worth 8sp", 
"hardtack", 
"an explosive rune, dealing 2d4 fire damage", 
"a palm-sized glass sphere", 
"a wooden comb", 
"fragments of a shattered sword", 
"a deck of tarot cards", 
"map of a nearby castle", 
"map of the local area", 
"a tin spoon", 
"a mess kit", 
"lacy undergarments", 
"spectacles worth 5gp", 
"a spool of thread", 
"a piece of chalk", 
"a ecklace of animal teeth", 
"a headhunter's contract", 
"a list of people in a nearby city", 
"a worn leather strap", 
"a ring of iron keys", 
"a flask full of salt water", 
"a box of candles", 
"a vial of quicksilver", 
"a traveller's journal", 
"a lead amulet", 
"a signet ring for a noble house", 
"a list of local taverns", 
"a golden yellow topaz gem worth 50gp", 
"a page torn from a spellbook", 
"scraps of bad poetry", 
"a pair of bloodstained gloves", 
"thirteen mouse teeth", 
"a pouch full of dried berries", 
"an invitation to a wedding that happened a few weeks ago", 
"a brass ring", 
"a shopping list", 
"the cork from a wine bottle", 
"a scrap of paper with uninteligible writing on it", 
"a smoking pipe", 
"a pouch of ruby powder", 
"a deed to a ruined tower", 
"a bottle of honey", 
"a sling with 10 bullets", 
"a broken buckle", 
"a knot of silk ribbons", 
"a silver pearl worth 10gp", 
"a potion of Polymorph Self worth 350gp", 
"1pp wrapped in a crude map", 
"pocket sand", 
"a wedge of cheese", 
"a string of wooden prayer beads", 
"a lock of hair", 
"a dead mouse", 
"a compass", 
"an empty flask", 
"85gp", 
"three diamonds worth 30gp each", 
"a black pearl worth 50gp", 
"a black opal worth 100gp"]>>

<</nobr>><<linkreplace "Try and pickpocket someone">>
	<<print random(15, 21)>> Sleight of Hand check to succeed.
	<<choice "Success" [You find <<print $npc.pockets.pluck()>> in the pockets of your hapless target.]>>
	<<choice "Failure" [You have been caught! Your target notices your attempts.]>>
<</linkreplace>>


:: TavernDescription
<<nobr>>
<<switch $tavern.draw>>
	<<case "attractive waitstaff">>
		<<set _tavernnotable to "You see one of the barmaids talking to a patron, and it's difficult to convince your eyes there's a more pleasant sight in the room, until you see another equally attractive barmaid pulling a pint at the bar.">>
	<<case "resident bard">>
		<<set _tavernnotable to "You see a bard singing a love song in the corner of the room, and are drawn to his pure, melifluous voice. He's quite a good singer, and the patrons are nodding along to the song appreciatively.">>
	<<case "witty banter with the waitstaff">>
		<<set _tavernnotable to "You see a gruff looking man catcall after one of the barmaids, and she looks over her shoulder, and replies something that you can't quite make out. Despite this, it's clear that whatever she said destroyed the man, as his friends burst into laughter while he deflates rather rapidly.">>
	<<case "crude jokes the bartender makes">>
		<<set _tavernnotable to "You see the bartender is talking to a <<print either($npc.age)>> <<print either($npc.gender)>>, smiles, and then says something, making $bartender.hisher conversation partner go white as a sheet, and immediately leave the establishment, with $bartender.firstname laughing, calling them 'too goody-two-shoes to be able to handle $tavern.name'.">>
	<<case "proximity to the thieves' guild headquarters">>
		<<set _tavernnotable to "You can see a sign by the door stating 'REPEATED PICKPOCKETING WILL RESULT IN THE THIEVES' GUILD BEING BANNED FROM THESE PREMISES'. Clearly, $tavern.name has an issue with the nearby thieves' guild.">>
	<<case "warmth inside">>
		<<set _tavernnotable to "$tavern.name is kept wonderfully toasty, and the warm air makes you comfortable and sleepy">>
	<<case "magic incense which is constantly burning">>
		<<set _tavernnotable to "You smell a peculiar aroma, which you can't quite place, only that it reminds you of the fond days of your childhood, until you see wafts of smoke trailing from behind the bar; there's a stick of incense burning, clearly at least somewhat magical.", $tavern.magicroll += 4>>
	<<case "proximity to the brothel">>
		<<set _tavernnotable to "You saw a sign outside which read 'No Soliciting', but inside, you see a much larger, more insistent sign which read 'NO SOLICITING. OF EITHER SORT'. Clearly, $tavern.name has an issue with the nearby whorehouse.">>
	<<case "proximity to the church">>
		<<set _tavernnotable to "You see a sign by the door which reads 'No proselytising'. Clearly, $tavern.name has an issue with the nearby church.", $tavern.magicroll += 1>>
	<<case "location by the river">>
		<<set _tavernnotable to "$tavern.name overlooks a gorgeous river, which you can hear gently rushing by the $tavern.structure $tavern.wordnoun inside. A fisherman is sitting at the bar, talking about his day's catch, which he's clearly exaggerating.">>
	<<case "wooden-chopping competition held weekly">>
		<<set _tavernnotable to "Above the bar is a fearsome axe. And another, and another. On the wall is what looks to be a leaderboard, with names and points next to the names. Upon closer inspection, it's revealed to be the scores for the wood chopping competition. Clever bartender; you can see the fireplace is well stocked.">>
	<<case "mahogany stairs">>
		<<set _tavernnotable to "You see a gorgeous spiral staircase, which presumably leads up to the sleeping quarters. The craftsmanship is astounding, and it's clearly well loved by staff and patrons alike.">>
	<<case "clean beds">>
		<<set _tavernnotable to "You see that the bar has been recently cleaned, and there's a surprising lack of spittle on the floor of the $tavern.wordnoun.">>
	<<case "lack of bedbugs">>
		<<set _tavernnotable to "You see a patron enter the bar from the sleeping quarters. The bartender asks if she slept well, and she nods at the $bartender.weight $bartender.manwoman, saying that she slept very well.">>
	<<case "magic bedbugs">>
		<<set _tavernnotable to "You see a patron enter the bar from the sleeping quarters, who's scratching his arms madly, with a doped up smile upon his face.", $tavern.magicroll += 4>>
	<<case "drunk wizard">>
		<<set _tavernnotable to "There's a thaumaturgist in the corner, who is practising cantrips as he downs another pint. He looks over at you, smiles, and says 'You can't cast drunk if you don't practice drunk!'", $tavern.magicroll += 4>>
	<<case "huge fireplace">>
		<<set _tavernnotable to "You see a huge fireplace in the centre of the $tavern.wordnoun, which fills the surrounding air with a wonderful warmth and aroma due to the pot which hangs above it, contentedly bubbling over the embers.">>
	<<case "incredible view">>
		<<set _tavernnotable to "You look out the window, and see that the view is indeed nothing to scoff at; the $tavern.wordnoun is situated on a hill which overlooks the sleepy $town.type of $town.name, and you can make out the specks of people walking about below. It's an unbelievable location for an inn.">>
	<<case "nice view">>
		<<set _tavernnotable to "You look out the window, and see that the view is indeed quite nice; the $tavern.wordnoun is situated on a hill which overlooks the sleepy $town.type of $town.name, and you can make out the specks of people walking about below. It's a nice location for an inn.">>
	<<default>>
		<<set _tavernnotable to "There's two men sitting in the corner, very intent on a thumbwrestling match.">>
	<</switch>>

<<switch $tavern.size>>
	<<case "huge">>
		$tavern.name is just one huge, $tavern.cleanliness room, with a small section of the hall cordoned off as the kitchen and bar area. Off to the side is a spiral staircase, which you would assume leads up to the lodgings.
	<<case "large">>
		$tavern.name is a large building, with the $tavern.cleanliness bar occupying the ground floor, and the beds for patrons are on the floor directly above you. 
	<<case "medium">>
		<<print either("$tavern.name is a tall building, but not particularly spacious; the $tavern.cleanliness bar occupies the ground floor, and you see a barmaid carrying a dish down from the stairs; the sign outside said that it had accomodation, so the beds must be on the third floor of the $tavern.structure building.", "$tavern.name is clearly a converted house; you can see that a bathroom was originally where the bar is, due to the unmistakable water staining that comes with bathtubs. The tavern is $tavern.cleanliness.")>>
	<<case "small">>
		$tavern.name is barely more than a large house; the $tavern.cleanliness bar area is permanently crowded due to a bottleneck preventing barmaids from passing through without having to negotiate through thirsty patrons looking for refills.
	<<case "tiny">>
		$tavern.name is very obviously a house that's been converted into a $tavern.wordnoun, probably as a hobby for the owner. It's unfortunately rather cramped inside, and taller patrons would be at risk of hitting their heads if they were careless inside the tiny $tavern.structure building. The tavern is $tavern.cleanliness.
<</switch>>
<</nobr>> _tavernnotable


:: Changelog
v.0.3
- Added ability to rename town & tavern
- Modified room cost formula to mirror the recommended prices
- CSS Style update
- Drop caps!
- Added exclusions for the brothels' main attractions being near the church...
- Minor code cleanup behind the scenes

v.0.2.0
- Added vegetarian & carnivorous menus based on tavern's roughness.
- Replaced attribute buttons with sliders (that actually work)
- Added races
	<i>Bartender's race will impact the tavern's roughness, cleanliness, etc.</i>
- Added special brews
	<i>Stolen from the /r/DnDBehindTheScreen 10000 Drinks thread</i>
- Added bonds
	<i>These are kinda hamfisted in, but it's just in case your PCs are really into talking with the bartender, and you need to make up more stuff to keep them interested.</i>
- Added descriptions of taverns based on size and draw.
- Made room availability dependent on size, and current population of the tavern.

v.0.1.0
* First release


:: ToDo
- Implement Fairmath for some modifiers
- Implement neighbouring taverns
- Implement overview of the town
- Implement pickpocketing
- More rumours
- Implement variable tavern prices based on size, cleanliness, wealth.
- Implement brawls in the tavern
- Implement alchemist's shop


:: Smithy
<<set $smithy to {
	wealth: either("squalid", "poor", "modest", "comfortable", "wealthy", "aristocratic", "kingly"),
	wealthroll: random(1, 100),
	reputationroll: random(1, 100),
	sizeroll: random(20, 80),
	cleanlinessroll: random(1, 100),
	expertiseroll: random(1, 100),
	intricacyroll: random(1, 100),
	hardinessroll: random(1, 100),
	magicroll: random(1, 100),
	structure: either("wooden", "wooden", "wooden", "wooden", "wooden", "stone", "stone", "stone", "stone", "hewn rock", "chiseled stone"),
}>>


:: Blacksmith
/*<<set $blacksmith to clone($npc)>>*/

<<set $blacksmith to {
	lastname: either($name.last),
	gender: either($npc.gender),
	race: either($npc.race),
	raceroll: random(1, 100),
	age: either($npc.age),
	height: either($npc.height),
	weight: either($npc.weight),
	trait: either($npc.trait),
	idle: ["talking with a customer", "picking $blacksmith.hisher nose", "playing a card game by $blacksmith.himher<<nobr>>self<</nobr>>", "sharpening a knife", "stocking the forge with fresh coals", "lugging a piece of metal to be worked on", "wiping the sweat from $blacksmith.hisher brow", "taking a drink of water", "sweating profusely from exertion"],
	owner: either(["owner", "caretaker", "proud owner", "proprietor", "current owner"]),
	greeting: ["nods at you", "welcomes you warmly", "smiles and greets you", "raises a hand with a wave", "sizes you up, before $blacksmith.heshe nods at you", "checks you out for just a moment before smiling at you"]
}>>

<<if $blacksmith.gender is "man">>
	<<set $blacksmith.heshe to "he">>
	<<set $blacksmith.himher to "him">>
	<<set $blacksmith.hisher to "his">>
	<<set $blacksmith.boygirl to "boy">>
	<<set $blacksmith.manwoman to "man">>
	<<set $blacksmith.menwomen to "men">>
	<<set $blacksmith.guygirl to "guy">>
	<<set $blacksmith.firstname to either($name.man)>>
<<elseif $blacksmith.gender is "woman">>
	<<set $blacksmith.heshe to "she">>
	<<set $blacksmith.himher to "her">>
	<<set $blacksmith.hisher to "her">>
	<<set $blacksmith.boygirl to "girl">>
	<<set $blacksmith.manwoman to "woman">>
	<<set $blacksmith.menwomen to "women">>
	<<set $blacksmith.guygirl to "girl">>
	<<set $blacksmith.firstname to either($name.woman)>>
<</if>>

<<set _BlackEyeColours to ["yellow", "amber", "brown", "hazel", "green", "blue", "gray", "aqua", "red", "purple", "pale brown", "pale blue", "pale green", "ash gray"]>>
<<set _blackeye to random (1, 10)>>
<<if _blackeye gt 9>>
	<<set $blacksmith.eyes to _BlackEyeColours[random(10, 14)]>>
<<elseif _blackeye gt 6>>
	<<set $blacksmith.eyes to _BlackEyeColours[random(0, 9)]>>
<<else>>
	<<set $blacksmith.eyes to _BlackEyeColours[random(1, 6)]>>
<</if>>

<<set _BlackskinColours to ["translucent", "white", "pale", "fair", "light", "light tan", "tan", "dark tan", "brown"]>>
<<set _Blackskin to random(1, 10)>>
<<if _Blackskin gt 6>>
		<<set $blacksmith.skincolour to _BarskinColours[random(5, 9)]>>
	<<elseif _Blackskin gt 3>>
		<<set $blacksmith.skincolour to _BarskinColours[random(3, 6)]>>
	<<elseif _Blackskin lte 3>>
		<<set $blacksmith.skincolour to _BarskinColours[random(0, 3)]>>
<</if>>

<<set $blacksmith.hair to $npc.hairtype.random() + " " + $npc.haircolour.random() + " hair">>

<<set _blackphysicaltraitroll to random(1, 10)>>
	<<if _blackphysicaltraitroll gt 8>>
		<<set $blacksmith.physicaltrait to either($npc.scar)>>
	<<elseif _blackphysicaltraitroll gt 6>>
		<<set $blacksmith.physicaltrait to either($npc.tattoo)>>
	<<elseif _blackphysicaltraitroll lte 6>>
		<<set $blacksmith.physicaltrait to $blacksmith.hair>>
	<</if>>

<<set $blacksmith.name to "$blacksmith.firstname" + " " + "$blacksmith.lastname">>


/* ------------------------ BLACKSMITH RACE ------------------------- */
<<if $blacksmith.race is "half-elf">>
	<<set $blacksmith.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), 
	$blacksmith.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "stocky", "beefy", "muscular", "muscular", "slightly underweight")>>
<<elseif $blacksmith.race is "elf">>
	<<set $blacksmith.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), 
	$blacksmith.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "muscular", "stocky", "slightly underweight")>>
<<elseif $blacksmith.race is "dwarf">>
	<<set $blacksmith.height to either("short", "squat"), 
	$blacksmith.weight to either("stocky", "beefy", "muscular", "muscular", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby")>>
<<elseif $blacksmith.race is "gnome">>
	<<set $blacksmith.height to either("short", "tiny"),  
	$blacksmith.weight to either("stocky", "beefy", "muscular", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby")>>
<<elseif $blacksmith.race is "halfling">>
	<<set $blacksmith.height to either("short", "tiny"), 
	$blacksmith.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight")>>
<<elseif $blacksmith.race is "half-orc">>
	<<set $blacksmith.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight")>>
<<elseif $blacksmith.race is "dragonborn">>
	<<set $blacksmith.height to either("rather average height", "slightly above average height", "tall", "tall", "tall"), $blacksmith.weight to either("stocky", "beefy", "muscular", "slightly underweight", "extremely muscular", "slightly overweight")>>
<<elseif $blacksmith.race is "tiefling">>
	<<set $blacksmith.weight to either("waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight")>>
<</if>>

/* Race Note Code - so humans are introduced as 'a short woman', and elves are introduced as elves. */
<<if $blacksmith.race is "human">>
		<<set $blacksmith.racenote to $blacksmith.height + $blacksmith.manwoman>>
	<<else>>
		<<set $blacksmith.racenote to $blacksmith.race>>
<</if>>

<<switch $blacksmith.race>>
	<<case "elf">>
		<<set $blacksmith.racesingular to "elf",
		$blacksmith.raceplural to "elves",
		$blacksmith.raceadjective to "elven",
		$blacksmith.racelanguage to "Elfish">>
	<<case "dwarf">>
		<<set $blacksmith.racesingular to "dwarf",
		$blacksmith.raceplural to "dwarves",
		$blacksmith.raceadjective to "dwarven",
		$blacksmith.racelanguage to "Dwarven">>
	<<case "halfling">>
		<<set $blacksmith.racesingular to "halfling",
		$blacksmith.raceplural to "hobbits",
		$blacksmith.raceadjective to "dwarven",
		$blacksmith.racelanguage to "Dwarven">>	
	<<case "half-orc">>
		<<set $blacksmith.racesingular to "half-orc",
		$blacksmith.raceplural to "half-orcs",
		$blacksmith.raceadjective to "orcish",
		$blacksmith.racelanguage to "Orcish">>
	<<case "dragonborn">>
		<<set $blacksmith.racesingular to "drake",
		$blacksmith.raceplural to "drakes",
		$blacksmith.raceadjective to "draconian",
		$blacksmith.racelanguage to "Draconic">>
	<<case "tiefling">>
		<<set $blacksmith.racesingular to "tiefling",
		$blacksmith.raceplural to "tieflings",
		$blacksmith.raceadjective to "devilish",
		$blacksmith.racelanguage to "Demonic">>
	<<default>>
		<<set $blacksmith.racesingular to "person",
		$blacksmith.raceplural to "people",
		$blacksmith.raceadjective to "human",
		$blacksmith.racelanguage to "Common">>
<</switch>>


:: Games
<<set $games to either([
{
	name: "Passe-dix",
	type: "chance game",
	description: "You see a man take three six-sided dice, and then roll them. He roars with pleasure as the dice come to a total of 12, and grabs his winnings from the banker. The dice moves to the next player, and the carrot (which signifies the banker) who spits on the dice, and everyone that's playing hands the new banker a silver piece. The player then rolls them, but only rolls a total of 9, which is met with boos and jeering.",
	rules: "Passe-dix is played with three dice. There’s always a banker, and the number of players is unlimited. The first gamer rolls: every time he throws UNDER ten he (and all the other players in the game) lose the specified stake, which goes to the banker. Every time he rolls ABOVE ten (or PASSES TEN–whence the name of the game), the banker must return double the stake to all the players in the game. After three losses of the roller (no matter how many wins), the roller position is passed to another gamer in the circle. The banker changes after each roll.",
	bet: 20
	},
	
	{
	name: "Highest Points",
	type: "chance game",
	description: "Two slack-jawed men are sitting in the middle of the room with two whittled dice each. They chuck a copper piece on the table, then roll, and the one that rolled higher grins as he grabs the copper.",
	rules: "2 six-sided dice, 2 players: each roll both dice and the highest sum wins.",
	bet: 2
	},
	
	{
	name: "Cross and Pile",
	type: "chance game",
	description: "Two men sit around a large table, and take turns flipping a coin. As the coin flies mid-air, the other calls out the result, winning the meager pot if they guess correctly.",
	rules: "Two players choose each side of a coin, and then the coin is flipped. The top side after flipping the coin is the one that wins.",
	bet: 10
	},
		
	{
	name: "Thimble Rig",
	type: "guessing game",
	description: "A quick hand, a rattling tongue, a deal board, three thimbles, and a pepper-corn. The game they played around the table with these three curious articles is a sort of Lilliputian game at cups and balls; and the beauty of it lies in dexterously seeming to place the pepper-corn under one particular thimble, getting the better to bet that it was there, and then winning his money by showing that it is not.",
	rules: "The object of the game is to guess which thimble the peppercorn is under; sort of like a miniature cup and balls.",
	bet: 5
	},
	
	{
	name: "Arm Wrestling",
	type: "strength game",
	description: "Two men sit across from each other, their right arms' elbow on the table, holding each others hand in their palm. A referee counts down from three, and as soon as he shouts 'go'!, the two start straining against each other, fighting to push the other's hand down through sheer force of will.",
	rules: "It's easy, haven't you ever played before?",
	bet: 8
	
	},
	
	{
	name: "Two-Up",
	type: "gambling game",
	description: "A small crowd of people are gathered around a table, where they flip two coins in the air, with one man groaning whenever they both turned heads, and another greedily grabbing the coins from the man in charge of overseeing the bets whenever they both turn tails, flicking the overseer a copper for his troubles."
	rules: "Two coins are flipped by the 'spinner', who bets against another. Both heads wins, both tails loses, and one of each calls for another cointoss, with the 'spinner' losing out on five consecutive re-tosses.",
	bet: 10
	}
	])>>


:: Ships
<<set $ship to {
	name: ["Lantheon", "Starchaser", "Dryad’s Fury", "Black Trident", "Corellon’s Arrow", "Morkoth", "Koalinthas", "Sehanine’s Fool", "Stormcrow", "Vaazrus", "Shield of Khahar", "Stingray", "Sanaj-Rakal", "Zhal-Vazir", "Griffonwing", "Blademark", "Golden Libram", "Hareth’s Barrel", "Kasha’s Wake", "Shining Flute", "White Feather", "Riventide", "Moonriser", "Gem of Malfier", "Dragon’s Glory", "Menacer", "Scarlet Dagger", "Kral-Tajir", "Ravager", "Kerle’s Drum", "Heart of Avandra", "Goldraker", "Sea Haunt", "Storm Maven", "Grimbol’s Cutlass", "Scimitar", "Black Gauntlet", "Iron Maiden", "Wavecrusher", "Hammer of Kavath", "Waterblade", "Arkhor’s Secret", "Dire Gar", "Prallmar’s Shadow", "Piranha", "Devil’s Fork", "Tuersyl’s Fist", "Daraj-Vzan", "Silver Chalice", "Demonrudder", "Turathi Flame", "Storm’s Eye", "Tanishar’s Fate", "Shard of Night", "Triton", "Jarak’s Grasp", "Nightmare", "Harpy’s Lure", "Devious", "Arazandro’s Bluff", "Nbod’s Haul", "Astaryntha", "Expeditious", "Curse of Thuban", "Siren’s Kiss", "Lonely Witch", "Rat’s Nest", "Evader", "Mistreaver", "Ven’r", "Vicious", "Dream of Melora", "Shensari", "Damilor", "Krimilvin’s Charm", "Bloodmonger", "Lucky Scrag", "Windstriker", "Grim Gale", "Djinni’s Wish", "Flying Eel", "Jewel of Irthos", "Broken Keel", "Javelin", "Myrska’s Revenge", "Fearsome", "Archon’s Hammer", "Vendetta", "Thunderchaser", "Heartless", "Shrike", "Morak’s Boat", "Mar-Turang", "Will-o’-wisp", "Asha-Naga", "Dominant", "Shoal Courser", "Crescent Moon", "Crystal Tear", "Kara-Vaji", "Shalastar", "Roc’s Talon", "Wavecarver", "Graethan", "Rotten Apple", "Bharzim’s Victory", "Avarice", "Farak-Changal", "Falling Star", "Crimson Knife", "Yisek’s Ride", "Shara-Vaja", "Varalan’s Dweomer", "Rangoth", "Vostarika", "Mirasandra", "Second Chance", "Redfeather", "Maal-Destir", "Scorpion", "Ghorzaar’s Bane", "Moonwatcher", "Dragon’s Crown", "Dragonhawk", "Dancing Sword", "Kaveth’s Whisper", "Tirah", "Phantom Shark", "Hjeltia", "Satyr", "Breyten’s Thrill", "Golden Coin", "Pearl of Fire", "Bhez-Rizma", "Fireball", "Color Spray", "Sea Bear", "Prosperous", "Summer Rain", "Sundowner", "Skulldark’s Ire", "Skandalor", "Zarkanan", "Sana-Losi", "Wolfshark", "Song of Elyndri", "Coral Rose", "Rune of Halendros", "Maelstrom", "Shadow Mask", "Deep Heathen", "Aurora", "Rusted Cutlass", "Thog’s Maul", "Wooden Stake", "Hellstrike", "Scepter Queen", "Prince of Lies", "Fang of Tezmyr", "White Hart", "Floating Cask", "Sea Howler", "Frostwind", "Moonshadow", "Melora’s Favor", "Dark Queen’s Voice", "Chethel’s Ghost", "Mad Hag", "Tamarion’s Grudge", "Raven’s Gamble", "Reckoner", "Wraithwind", "Kalisa Tano", "Beholder", "Slippery Trickster", "Retribution", "Whirling Glyph", "Lady Rose", "Karthang’s Plunder", "Good Fortune", "Axe of Thard", "Black Bow", "Quickstrike", "Thelandira", "Hammergust", "Barracuda", "Sahandrian’s Quarrel", "Feral Knave", "Wildwyrm", "Shevaya’s Honor", "Blackhelm’s Legacy", "Wyvern’s Sting", "Dragonroar", "Kegstaff", "Oaken Ranger", "Timber Serpent", "Desperate Sorceress", "Screaming Gull", "Greedy Drake", "Light of Pjaltr", "Fate’s Blessing", "Stardancer", "Leering Skull", "Ebon Moon", "Werewolf", "Redemption", "Zaetchan’s Privilege", "Sea Skulk", "Savage Swan", "Bane’s Breath", "Ghorok’s Grail", "Emerald Eye", "Remorseless", "Skiprock", "Zaetra", "Silverfin", "Risen Ghost", "Listless", "Vortex", "Advantage", "Autumn Song", "Trystan’s Delight", "Soaring Manta", "Calomaar’s Edge", "Saerthzal", "Iron Trumpet", "Locathah", "Demonskull", "Arrowhead", "Frastain’s Bottle"],
	type: ["caravel", "carrack", "crayer", "hoy", "picard", "galley", "longship", "balinger", "frigate", "galleon", "galleass", "galley", "nef"]
	}
>>


:: Inactive Stuff
Ships

Smithy and Blacksmith

$tavern.priceroll
	$SpecialBrew.cost
	$Tavern.Lodging


:: StoryMenu
[[Credits]]

<<link "Submit a Suggestion">><<include "Submission Form">><</link>>


/*<<link "Check Variables">><<checkvars>><</link>>

<<link "Create Bug Report">><<bugreport "Bug Report Instructions">><</link>>*/


:: Potions
<<set $potion to {
	type: either([
"Potion", 
"Elixir", 
"Draught", 
"Vial", 
"Philter", 
"Tonic", 
"Brew", 
"Ichor", 
"Juice", 
"Concoction"]),
	title: [
"Healing", 
"Vigor", 
"Vitality", 
"Might", 
"Courage", 
"Giant Strength", 
"Flame Resistance", 
"Cold Resistance", 
"Necro Resistance", 
"Radiant Resistance", 
"Stoneskin", 
"Acid Resistance", 
"Lightning Resistance", 
"Succubus Charm", 
"Shielding", 
"Flame Breath", 
"Growth", 
"Shrinking", 
"Comprehension", 
"Fertility", 
"Intimidation", 
"Luck", 
"Mana", 
"Arcane", 
"Animal form", 
"Dreams", 
"Nightmares", 
"Stamina", 
"Fleet foot", 
"Knowledge", 
"The Bard", 
"Disguise", 
"Feast", 
"Youth", 
"Age", 
"Furnace", 
"Eagle Sight", 
"Health", 
"Invulnerability", 
"Riddle me gone", 
"Horrifying appearance", 
"Beautiful appearance", 
"Swordsmanship", 
"Bowmanship", 
"Nymph breath", 
"Midas", 
"Berserker", 
"Utter Hatred", 
"Oracle", 
"Demonic Leech", 
"Fey Nature", 
"Tracelessness", 
"Gracefulness", 
"Goblin Climb", 
"Dead Ringer", 
"One Leafed Clover", 
"Possession", 
"Owls Wake", 
"Hawks Flight", 
"Peace", 
"Rejuvenation", 
"Sphinxes Truth", 
"Serpent Tongue", 
"Navigation", 
"Hook Horror", 
"Schaffensfreude", 
"Invisibility", 
"Wild magic", 
"Fame", 
"Goats Trek", 
"Gargoyle Toughness", 
"Atomic Clock", 
"Transmutation", 
"Iron Skin", 
"Sex Change", 
"Race Change", 
"Musical Breath", 
"Utter Understanding", 
"Split Form", 
"Flavour", 
"Glimmer", 
"Love", 
"Poison", 
"Rebirth", 
"Elemental form", 
"True form", 
"Gods Touch", 
"Antidepressant", 
"Ghostly Form", 
"Artisans Skill", 
"Godly form", 
"Bless Weapon", 
"Euphoria", 
"Bodyguard", 
"Babelfish", 
"Preservation", 
"Fear", 
"Night vision", 
"Tracking", 
"Cure-all"],

	effect: [
"instantly regenerates some health when drank", 
"gives temporary health when drank", 
"slowly regenerates health over a period of some hours", 
"gives a bonus to attack rolls after drinking", 
"gives immunity to fear and some temporary inspiration", 
"gives the user much more strength", 
"gives resistance to fire damage", 
"gives resistance to cold damage", 
"gives resistance to necrotic damage", 
"gives resistance to radiant damage", 
"gives resistance to martial damage", 
"gives resistance to acid", 
"gives resistance to lightning damage", 
"makes the drinker irresistible to nearby people", 
"gives the user a magical shield of energy", 
"gives the user fire breath for a short time", 
"makes the user double in size", 
"makes the user half in size", 
"lets the user understand all languages", 
"makes the user very fertile, almost certain to make a baby under its effects", 
"gives the user a huge booming voice that terrifies those around", 
"gives the user a temporary boost to luck", 
"gives the user more magical power to cast with", 
"gives the user more powerful spells", 
"makes the user turn into a random animal", 
"makes the user get lost in a hallucinary dream world of their perfect dream", 
"makes the user get lost in a hallucinary dream world of their worst nightmares", 
"gives the user more stamina and constitution", 
"makes the user have more speed", 
"increases the users intelligence temporarily", 
"increases the users dexterity temporarily", 
"changes the users form to a disguised form of any race and appeance", 
"removes all hunger and thirst from the target", 
"makes the user grow some years younger", 
"makes the user grow some years older", 
"makes the user radiate with a damaging aura", 
"gives the user strong vision and a bonus to perception", 
"cures all diseases and illnesses", 
"freezes the user in stasis that makes them immune to damage but they cannot move or act", 
"gives the user the cure to a single riddle", 
"makes the user look more ugly for a time", 
"makes the user appear more attractive for a time", 
"makes the user more effective and versatile with a blade", 
"makes the user more effective with a bow or ranged weapon", 
"gives water breathing", 
"makes the user turn things to gold", 
"makes the user rage with great strength", 
"makes the user have bonuses against a particular type of enemy", 
"lets the user divinate the future", 
"heals a portion of all damage the user deals", 
"lets the user become one with animals and nature around them", 
"makes the user very hard to follow", 
"makes the user have a better acrobatics skill", 
"gives the user a bonus to climbing", 
"makes the user appear completely dead to all magic", 
"gives the user worst luck", 
"lets the user gain control of a nearby creature, their body comatosed while they do", 
"makes the user need no sleep for a time", 
"lets the user fly", 
"makes the user very calm and unable to harm others", 
"heals a single scar or bad injury on the user such as a missing arm", 
"makes the user tell the truth", 
"makes the user only able to lie", 
"makes the user unable to get lost and find where they need", 
"turns the users hands become sharp weaponised blades", 
"makes the enemies take damage as they deal it to the user", 
"makes the user invisible", 
"taps into wild magic making an absolutely random thing happen", 
"makes the user more famous", 
"makes the user immune to the toils of long travels and bad weather", 
"increases the users constitution", 
"lets the user know the exact tme and date", 
"lets the user have the ability to change somethings properties", 
"turns the users skin to metal giving them many resistances", 
"changes the users gender", 
"changes the users race", 
"makes the user say everything in song, and fey music follows them in the air", 
"makes the user know very intimately about one exact thing", 
"turns the user into two or three tiny versions of themselves and controls them all", 
"makes anything and everything taste amazing!",
"makes the user and its gear instantly clean and as good looking as possible", 
"makes the user and someone else fall in love", 
"poisons the user, weakening them", 
"resurrects the user if they die soon after drinking", 
"turns the user to an elemental form relevant to their personality", 
"turns the user into a familiar like creature similar to their personality", 
"gives the user a holy connection to their god or fiendish deity", 
"does what it says on the tin", 
"makes the user intangible and able to phase through objects", 
"gives the user skill in a particular art temporarily", 
"improves all stats", 
"makes the users weapons do more damage", 
"makes the user feel amazing and trip out", 
"creates a spectral bodyguard for a short time who obeys orders", 
"lets the user speak any language but not understand it", 
"stops whatever its poured on from rotting or degrading", 
"makes the user terrified", 
"gives the ability to see in the dark", 
"lets the user track an enemy", 
"cures any status effects"],

	strength: either([
"regular with no side effect", 
"regular with a slight side effect", 
"regular with a strong side effect", 
"minor with a strong side effect", 
"minor with a slight side effect", 
"major with a strong side effect", 
"major with a small side effect", 
"poisonous. Almost no positive effect and is all side effect", 
"temporary, but strong and wears off quickly", 
"seemingly permanent"]), 

	sideeffect: either([
"nothing bad at all", 
"puts the user to sleep", 
"rapid hair growth all over the body", 
"bleeding from the eyes", 
"vivid hallucinations", 
"flashbacks of your own eventual demise", 
"the skin to crack and appear distorted", 
"spots to grow on the skin", 
"diarrhoea", 
"vomiting", 
"blurred vision", 
"blindness", 
"deafness", 
"mutism", 
"health loss via rapid bleeding", 
"a sudden horrific accent", 
"the irresistible urge to dance", 
"the hearing of demons", 
"loss of balance", 
"everything tasting like dirt for some time", 
"excessive drooling", 
"loss of intelligence", 
"loss of strength", 
"loss of speed", 
"loss of charisma", 
"genuine happiness", 
"hunger", 
"thirst", 
"trouble breathing", 
"sudden moustache", 
"poisoning", 
"petrification", 
"stunning", 
"immobilisation", 
"increased libido", 
"fidgeting", 
"itchiness", 
"rashes", 
"attracts bears", 
"magically covers in dirt", 
"horrifying stench", 
"baldness", 
"swelling", 
"loss of a random item", 
"curses", 
"damage", 
"weakness to a magical damage type", 
"weakness to physical damage", 
"feelings of guilt", 
"feelings of anxiety", 
"feelings of shame", 
"sneezing", 
"uncontrollable crying", 
"need to sing heroic music", 
"urge to hug", 
"kleptomania", 
"burping", 
"loss of smell", 
"insomnia", 
"paranoia", 
"bad luck", 
"summons imps that want to kill you", 
"summons angry bees", 
"fear of something", 
"temporary madness", 
"relaxation", 
"appreciation of colours and sound", 
"tripping the hell out", 
"painful lust", 
"light headedness", 
"increased confidence", 
"recklessness", 
"rage", 
"sadness", 
"dizziness", 
"pain", 
"slight possession", 
"allergic reaction to your favourite food", 
"strong belief that you are someone else", 
"severe debt", 
"grumpiness", 
"muscle spasms", 
"a bloated feeling", 
"a cold", 
"a fever", 
"becoming strangely light", 
"weakness", 
"the urge to fight", 
"the need to make friends", 
"nausea", 
"mood swings", 
"addiction", 
"need for booze", 
"drunkeness", 
"coughing", 
"uncontrollable babbling", 
"slight aches", 
"a bad taste for some time", 
"giddiness", 
"laughter"]),


	container: either([
"a conical smooth glass bottle", 
"a square glass bottle", 
"a not quite watertight leather waterskin", 
"a stone flask", 
"a metal thermos", 
"a glass syringe", 
"a small medical vial", 
"a small shot sized bottle", 
"a large metal bottle", 
"a capped horn", 
"an ornate very decorated glass bottle", 
"a geometric diamond shaped bottle", 
"a translucent long wine bottle", 
"a translucent beer bottle", 
"a leather pouch", 
"an inhaler like spray bottle", 
"a coloured bottle", 
"a bone flask", 
"a small metal vial", 
"a large bottle that can be swigged several times"]), 

	appearance: either([
"clear", 
"blue", 
"green", 
"red", 
"pale green", 
"pink", 
"light blue", 
"white", 
"black", 
"dark grey", 
"light grey", 
"yellow", 
"orange", 
"gold", 
"orange", 
"bronze", 
"metallic", 
"purple", 
"brown", 
"dark red"]), 

	appearance2: either([
"flecks of colour", 
"swirls of colour", 
"fizzing bubbles", 
"bubbles suspended in it", 
"some kind of bone floating in it", 
"leaves and flowers in it", 
"two separating liquid", 
"a bright glow", 
"a soft glow", 
"stripes of colour", 
"translucency", 
"a cloudy murkiness", 
"blood within it", 
"dirt floating in it", 
"chunks of metal in it", 
"some type of gore from a slain creature", 
"steam coming from it", 
"a face in the liquid", 
"constantly moving and shifting liquid", 
"a constant heat"]), 

	texture: either([
"thick and sludgy", 
"thin and watery", 
"airy and bubbly", 
"slimey", 
"almost solid", 
"oily", 
"chunky", 
"bitty", 
"milky", 
"almost gaseous"]),

	smell: either([
"nothing at all", 
"sulphur", 
"fresh air", 
"baking cookies", 
"flowers", 
"rotting meat", 
"egg", 
"rotten eggs", 
"fresh bread", 
"blood", 
"home", 
"vomit", 
"garlic", 
"fruit", 
"chocolate", 
"beer", 
"smoke", 
"wood", 
"death", 
"orc", 
"wet dog", 
"wet goblin", 
"perfume", 
"cheap perfume", 
"musk", 
"garbage", 
"sand", 
"the forest", 
"nuts", 
"acidic", 
"spicy", 
"minty", 
"of chemicals", 
"dirt", 
"of something bad flavoured to taste better", 
"alcohol", 
"sugar", 
"a damp cave", 
"strange", 
"indescribable but nice", 
"indescribable but horrid", 
"rain", 
"medical", 
"bacon", 
"coffee", 
"cut grass", 
"vanilla", 
"the sea", 
"roast meat", 
"festive", 
"lavender", 
"lilac and gooseberries", 
"a fresh baby", 
"a new car", 
"cirtrus", 
"leather", 
"metal", 
"a forge", 
"fresh cake", 
"paint", 
"wine", 
"polish", 
"cheese", 
"fish", 
"compost", 
"the sewers", 
"apples", 
"holy oils", 
"massage oil", 
"a brothel", 
"old fruit", 
"roses", 
"something that stirs memories", 
"gingerbread", 
"cinnamon", 
"candy", 
"fumes", 
"bark", 
"chicken", 
"beef", 
"human flesh", 
"gunpowder", 
"a storm", 
"success", 
"gold", 
"mayonnaise", 
"barbeque", 
"salt", 
"pepper", 
"aromatic spices", 
"fruit punch", 
"water", 
"fresh water", 
"stagnant water", 
"mud", 
"a colour", 
"music", 
"the end of the world", 
"magically the worst thing to you", 
"magically the most desirable thing to you"]), 

	taste: either([
"nothing at all", 
"sulphur", 
"fresh air", 
"baking cookies", 
"flowers", 
"rotting meat", 
"egg", 
"rotten eggs", 
"fresh bread", 
"blood", 
"home", 
"vomit", 
"garlic", 
"fruit", 
"chocolate", 
"beer", 
"smoke", 
"wood", 
"death", 
"orc", 
"wet dog", 
"wet goblin", 
"perfume", 
"cheap perfume", 
"musk", 
"garbage", 
"sand", 
"the forest", 
"nuts", 
"acidic", 
"spicy", 
"minty", 
"of chemicals", 
"dirt", 
"of something bad flavoured to taste better", 
"alcohol", 
"sugar", 
"a damp cave", 
"strange", 
"indescribable but nice", 
"indescribable but horrid", 
"rain", 
"medical", 
"bacon", 
"coffee", 
"cut grass", 
"vanilla", 
"the sea", 
"roast meat", 
"festive", 
"lavender", 
"lilac and gooseberries", 
"a fresh baby", 
"a new car", 
"cirtrus", 
"leather", 
"metal", 
"a forge", 
"fresh cake", 
"paint", 
"wine", 
"polish", 
"cheese", 
"fish", 
"compost", 
"the sewers", 
"apples", 
"holy oils", 
"massage oil", 
"a brothel", 
"old fruit", 
"roses", 
"something that stirs memories", 
"gingerbread", 
"cinnamon", 
"candy", 
"fumes", 
"bark", 
"chicken", 
"beef", 
"human flesh", 
"gunpowder", 
"a storm", 
"success", 
"gold", 
"mayonnaise", 
"barbeque", 
"salt", 
"pepper", 
"aromatic spices", 
"fruit punch", 
"water", 
"fresh water", 
"stagnant water", 
"mud", 
"a colour", 
"music", 
"the end of the world", 
"magically the worst thing to you", 
"magically the most desirable thing to you"]), 

	label: either([
"its name and title in bold letters", 
"its description in ornate elvish", 
"its description in elvish with a relevant mythic story", 
"its description on dwarven", 
"Dwarven runes", 
"its description in gnomish", 
"Gnomish diagrams for its use", 
"the words USE ONLY IN EMERGANCIES scrawled on it", 
"a mass produced label claiming the company has no fault for any side effects", 
"a mass produced label saying that it’s a new flavour", 
"very tiny print describing how the potion was made in great detail, around 1000 words", 
"its name in Bold words in Giant", 
"is scrawled off", 
"has faded beyond reading", 
"has been scraped off", 
"its description and a random fact", 
"its description and a small compliment to make your day better", 
"its description and a joke", 
"its description in infernal", 
"its description in some ancient language", 
"all in some kind of symbols", 
"all in some kind of raised symbols for the blind to read", 
"its description in elemental languages", 
"its name and flavour", 
"its name with a warning about side effects", 
"its name and its recommended buying price", 
"bloody prints all over it", 
"name engraved into the container", 
"its name glowing with minor magic", 
"a cartoony mascot", 
"a warning of an ancient curse", 
"its name and description in invisible ink", 
"its description in draconic", 
"several different names and descriptions plastered over each other", 
"a name of a completely different potion to what it does", 
"a title describing the exact opposite", 
"a money back guarantee", 
"a coupon for a free potion", 
"a living face looking around", 
"its name and recipe for other alchemists", 
"a heartfelt love letter for someone", 
"a heartfelt hate letter for someone", 
"a persons name",
"the potion wont work unless asked by its name to do so", 
"a strange prophecy", 
"a small doodle", 
"a note saying DO NOT DRINK", 
"a passive aggressive note about other people drinking potions that do not belong to them", 
"brightly glowing letters", 
"that plays a very quiet sing song till the bottle is empty", 
"ornate and beautiful designs", 
"very practical designs", 
"holy symbols", 
"unholy symbols", 
"Fey symbols and sylvan writing", 
"a riddle, the lid not opening unless the riddle is solved", 
"saying its designed for babies", 
"saying that it shouldn’t be drank by anyone under 18", 
"a note saying it is illegal contraband being confiscated", 
"a note saying the alchemist thinks it is its greatest work", 
"a note saying the alchemist is sorry for ever creating it", 
"a note saying that it never should have been made and copius blood stains over the bottle", 
"it says you’re being watched", 
"its description in Druidic", 
"its description in Orcish",
"its description in Goblin", 
"its description in Halfling", 
"its description in Celestial", 
"its description in Undercommon", 
"its description in Deep speech", 
"its description in strange arcane symbols", 
"a map of where the potion was made", 
"a small puzzle for kids", 
"a list of ingredients in their chemical forms", 
"a list of possible side effects as long as the bottle is", 
"a red X", 
"a sad face", 
"an angry face", 
"a happy face", 
"a healing symbol", 
"a cheesy pun potion name", 
"growing with vines", 
"growing with flowers", 
"growing with crystals", 
"growing with rock", 
"shamanistic symbols and shavings", 
"no words just a single colour", 
"water damaged but a just barely legible label", 
"a label as if it was some kind of present", 
"a label showing how many calories it is", 
"a warning about potion abuse and to only take in moderation", 
"a label with warnings and side effects all scribbled out", 
"that only shows the side effects", 
"a mysterious number", 
"a code name", 
"a few unrelated letters", 
"the name of one of the party members", 
"the name of the bad guy", 
"crawling with bugs", 
"covered in something unspeakable", 
"covered in glitter. It gets everywhere"])
}>>

<<set _potionroll to random(0, 99)>>
	<<set $potion.title to $potion.title[_potionroll], $potion.effect to $potion.effect[_potionroll]>>

<<set $potion.titlereadout to $potion.type + " of " + $potion.title>>
<<set $potion.descriptionreadout to "The potion is in a " + $potion.container + ", and has a label showing " + $potion.label + ". It looks " + $potion.appearance + " with " + "$potion.appearance2. " + "It is " + $potion.texture + " and smells of " + $potion.smell + " but tastes of " + $potion.taste + ".">>
<<set $potion.functionreadout to "The potion's strength is " + $potion.strength + ", and " + $potion.effect + " with the side effect of " + $potion.sideeffect + ".">>


:: SmithyOutput [output]
You enter $smithy.name and see the blacksmith is <<print $blacksmith.idle.pluck()>>. The $smithy.size room is $smithy.cleanliness


:: SmithyNameGen
<<set _smithynameroll to random(1, 5)>>

<<set $smithy.adjective to either("Hard", "Sharp", "Pointy", "Well-worn", "Rusted", "Shiny", "Cold", "Glowing", "Heated", "Golden", "Silvered", "Bronzed", "Polished", "Engraved", "Jeweled", "Plated", "Eternal", "Long-Lasting", "Famed")>>

<<set $smithy.noun to either("Iron", "Metal", "Gold", "Silver", "Bronze", "Copper", "Platinum", "Electrum", "Ingot", "Tongs", "Pliers", "Anvil", "Hammer", "Forge", "Bellows", "Bucket", "Steam", "Smoke", "Chimney", "Flame", "Fire", "Magma", "Coal", "Crucible")>>

<<set $smithy.family to either("Son", "Daughter", "Brother", "Sister", "Uncle", "Aunt", "Father", "Friends", "Family", "Fool")>>

<<set $smithy.rider to either("Shop", "Blacksmith", "Fabricator", "Smith", "Smithy", "Farrier", "Metalsmith", "Swordsmith")>>

<<switch _smithynameroll>>
	<<case 1>>
		<<set $smithy.name to "The " + $smithy.adjective + " " + $smithy.noun>>
	<<case 2>>
		<<set $smithy.name to $blacksmith.firstname + " and " + $smithy.family>>
	<<case 3>>
		<<set $smithy.name to $smithy.noun + " and " + $smithy.family>>
	<<case 4>>
		<<set $smithy.name to "The " + $smithy.adjective + " " + $smithy.rider>>
	<<case 5>>
		<<set $smithy.name to $smithy.adjective + " " + $smithy.noun>>
<<default>>
    <<set $smithy.name to "The " + $smithy.adjective + " Smithy">>
<</switch>>


:: SmithyModifiers
/* ------------------------- SIZE -------------------------- */
<<if $tavern.sizeroll gt 80>>
		<<set $tavern.size to "huge">>
	<<elseif $tavern.sizeroll gt 60>>
		<<set $tavern.size to "large">>
	<<elseif $tavern.sizeroll gt 40>>
		<<set $tavern.size to "medium">>
	<<elseif $tavern.sizeroll gt 20>>
		<<set $tavern.size to "small">>
	<<elseif $tavern.sizeroll lte 20>>
		<<set $tavern.size to "tiny">>
<</if>>

/*
	reputationroll: random(1, 100),
	sizeroll: random(20, 80),
	cleanlinessroll: random(1, 100),
	expertiseroll: random(1, 100),
	intricacyroll: random(1, 100),
	hardinessroll: random(1, 100),
	magicroll: 
*/

<<if $smithy.structure is "hewn rock">>
		<<set $smithy.roughnessroll += 3>>
	<<elseif $smithy.structure is "chiseled stone">>
		<<set $smithy.roughnessroll -= 1>>
	<<elseif $smithy.structure is "marble">>
		<<set $smithy.cleanlinessroll += 5, $smithy.wealthroll += 6>>
<</if>>

/* ------------------------- CLEANLINESS -------------------------- */
<<if $smithy.cleanlinessroll gt 80>>
		<<set $smithy.expertiseroll += 10,
		$smithy.intricacyroll += 12, 
		$smithy.hardinessroll += 8, 
		$smithy.cleanliness to "fastidious, with a swept floor and tools stored neatly on the walls. There's a desk in the corner with a piece of parchment showing the current project's measurements, and the materials are neatly stored in bins. Clearly, whatever apprentice has been charged with upkeep of the smithy has taken their job very seriously.">>
	<<elseif $smithy.cleanlinessroll gt 70>>
		<<set $smithy.expertiseroll += 7,
		$smithy.intricacyroll += 8, 
		$smithy.hardinessroll += 6, 
		$smithy.cleanliness to "very tidy, with a swept floor and tools stored neatly on the bench in a row. The forge has been recently swept, and there's a surprising lack of grime. On the wall are several project specifications nailed, with bins of their respective required materials underneath; it's clearly a well kempt smithy.">>
	<<elseif $smithy.cleanlinessroll gt 60>>
		<<set $smithy.expertiseroll += 3,
		$smithy.intricacyroll += 4, 
		$smithy.hardinessroll += 4, 
		$smithy.cleanliness to "tidy, with a swept floor and things in some semblance of order. There are sheafs of paper on the bench, with hunks of metal neatly holding each stack down; clearly, they are specifications for different projects, and the materials needed for each of them.">>
	<<elseif $smithy.cleanlinessroll gt 50>>
		<<set $smithy.expertiseroll += 1,
		$smithy.hardinessroll += 2, 
		$smithy.cleanliness to "reasonably tidy, with the usual dirt from $blacksmith.firstname<<nobr>>'s<</nobr>> current project on the floor. There are sheafs of parchment on the bench with measurements and specifications for projects, and there's a bucket of water still sizzling from a recent dousing in the corner.">>
	<<elseif $smithy.cleanlinessroll gt 40>>
		<<set $smithy.expertiseroll -= 1,
		$smithy.hardinessroll -= 2, 
		$smithy.cleanliness to "somewhat messy, with the usual dirt and debris from $blacksmith.firstname<<nobr>>'s<</nobr>> current project on the floor; a half-hearted sweeping has been recently made, although all that did was push the dirt around the smithy to dirty up different parts of the floor.">>
	<<elseif $smithy.cleanlinessroll gt 30>>
		<<set $smithy.expertiseroll -= 3,
		$smithy.hardinessroll -= 4, 
		$smithy.intricacyroll -= 2, 
		$smithy.cleanliness to "rather messy, with tools strewn around, and spare hunks of metal littering the floor. You can see several projects lying either abandoned or at least temporarily forgotten, coated in a layer of dust. The bench top is cluttered with hammers, and the anvil itself has a layer of grime on it, in desperate need of a cleaning.">>
	<<elseif $smithy.cleanlinessroll gt 20>>
		<<set $smithy.expertiseroll -= 5,
		$smithy.hardinessroll -= 6, 
		$smithy.intricacyroll -= 6, 
		$smithy.cleanliness to "very messy, with tools and offcuts strewn around, and blackened cobwebs lining the ceiling. There's a layer of dust and grime on the bench top, and the floor has not been swept in quite a while.">>
	<<elseif $smithy.cleanlinessroll lte 20>>
		<<set $smithy.expertiseroll -= 7,
		$smithy.hardinessroll -= 8, 
		$smithy.intricacyroll -= 10, 
		$smithy.cleanliness to "filthy, with smoke having blackened the walls and a thick layer of grime and dust coating every surface. The smell of various burnt woods, coals, and other things permeates your nostrils, and your boots leave visible footprints in the ash underfoot.">>	
<</if>>


:: SmithyRenders
/* ------------------------- SIZE -------------------------- */
<<if $smithy.sizeroll gt 80>>
		<<set $smithy.size to "huge">>
	<<elseif $smithy.sizeroll gt 60>>
		<<set $smithy.size to "large">>
	<<elseif $smithy.sizeroll gt 40>>
		<<set $smithy.size to "medium">>
	<<elseif $smithy.sizeroll gt 20>>
		<<set $smithy.size to "small">>
	<<elseif $smithy.sizeroll lte 20>>
		<<set $smithy.size to "tiny">>
<</if>>


/* ------------------------- CLEANLINESS -------------------------- */
<<if $smithy.cleanlinessroll gt 80>>
		<<set $smithy.cleanliness to "fastidious, with a swept floor and tools stored neatly on the walls. There's a desk in the corner with a piece of parchment showing the current project's measurements, and the materials are neatly stored in bins. Clearly, whatever apprentice has been charged with upkeep of the smithy has taken their job very seriously.">>
	<<elseif $smithy.cleanlinessroll gt 70>>
		<<set $smithy.cleanliness to "very tidy, with a swept floor and tools stored neatly on the bench in a row. The forge has been recently swept, and there's a surprising lack of grime. On the wall are several project specifications nailed, with bins of their respective required materials underneath; it's clearly a well kempt smithy.">>
	<<elseif $smithy.cleanlinessroll gt 60>>
		<<set $smithy.cleanliness to "tidy, with a swept floor and things in some semblance of order. There are sheafs of paper on the bench, with hunks of metal neatly holding each stack down; clearly, they are specifications for different projects, and the materials needed for each of them.">>
	<<elseif $smithy.cleanlinessroll gt 50>>
		<<set $smithy.cleanliness to "reasonably tidy, with the usual dirt from $blacksmith.firstname<<nobr>>'s<</nobr>> current project on the floor. There are sheafs of parchment on the bench with measurements and specifications for projects, and there's a bucket of water still sizzling from a recent dousing in the corner.">>
	<<elseif $smithy.cleanlinessroll gt 40>>
		<<set $smithy.cleanliness to "somewhat messy, with the usual dirt and debris from $blacksmith.firstname<<nobr>>'s<</nobr>> current project on the floor; a half-hearted sweeping has been recently made, although all that did was push the dirt around the smithy to dirty up different parts of the floor.">>
	<<elseif $smithy.cleanlinessroll gt 30>>
		<<set $smithy.cleanliness to "rather messy, with tools strewn around, and spare hunks of metal littering the floor. You can see several projects lying either abandoned or at least temporarily forgotten, coated in a layer of dust. The bench top is cluttered with hammers, and the anvil itself has a layer of grime on it, in desperate need of a cleaning.">>
	<<elseif $smithy.cleanlinessroll gt 20>>
		<<set $smithy.cleanliness to "very messy, with tools and offcuts strewn around, and blackened cobwebs lining the ceiling. There's a layer of dust and grime on the bench top, and the floor has not been swept in quite a while.">>
	<<elseif $smithy.cleanlinessroll lte 20>>
		<<set $smithy.cleanliness to "filthy, with smoke having blackened the walls and a thick layer of grime and dust coating every surface. The smell of various burnt woods, coals, and other things permeates your nostrils, and your boots leave visible footprints in the ash underfoot.">>	
<</if>>


:: Cloner
<<set $cloner to {
	lastname: $name.last.pluck(),
	gender: ["man", "woman"],
	race: ["human", "human", "human", "human", "human", "human", "half-elf", "half-elf", "elf", "elf", "dwarf", "dwarf", "gnome", "halfling", "half-orc", "dragonborn", "tiefling"],
	age: ["childlike", "rather young", "eighteen year old", "surprisingly young", "relatively young", "relatively young", "middle aged", "middle aged", "middle aged", "middle aged", "mid aged", "relatively old", "sun wizened", "quite old", "ancient"],
	height: ["tiny", "short", "slightly below average height", "rather average height", "slightly above average height", "tall", "tall", "tall", "giraffe-like"],
	weight: ["waif-like", "thin", "skinny", "skinny", "wiry", "thin", "stocky", "beefy", "muscular", "slightly underweight", "slightly overweight", "slightly overweight", "round", "tubby", "portly"],
	haircolour: ["brunette", "brunette", "brown", "brownish", "muddy", "blonde", "blonde", "white", "black", "black"],
	hairtype: ["thick", "wispy", "straight", "straight", "wavy", "wavy", "curly", "wiry", "oily", "lush", "poofy", "long", "braided", "very long", "greasy", "unruly", "unusually styled", "short cropped hair", "a shaved head"],
	scar: ["a jagged scar", "a dark purple scar", "an angry red scar", "a long, thin scar running up the arm", "a scar on the eye", "a scar around the neck", "a scar on the throat", "a fiery red scar", "a finger missing", "two fingers missing"],
	tattoo: ["a dagger tattoo", "an arrow tattoo", "an anchor tattoo", "a skull tattoo", "a pair of crossed bones tattoo", "a snake tattoo", "a scorpion tattoo", "a spider web tattoo", "a heart tattoo", "a ring of thorns tattoo", "a mermaid tattoo", "a dragon tattoo"],
	class: ["barbarian", "bard", "cleric", "druid", "fighter", "monk", "rogue", "ranger", "paladin", "sorcerer", "warlock", "wizard"],
	profession: ["Actor", "Advocate", "Advisor", "Animal handler", "Apothecary", "Architect", "Archivist", "Armorer", "Astrologer", "Baker", "Banker", "Barber", "Barkeep", "Blacksmith", "Bookseller", "Brewer", "Bricklayer", "Brothel keeper", "Buccaneer", "Butcher", "Caravanner", "Carpenter", "Cartographer", "Chandler", "Chef", "Clock maker", "Cobbler", "Cook", "Counselor", "Courtesan", "Courtier", "Cowherd", "Dancer", "Diplomat", "Distiller", "Diver", "Farmer", "Fisherman", "Fishmonger", "Gardener", "General", "Gladiator", "Glovemaker", "Goldsmith", "Grocer", "Guardsman", "Guildmaster", "Hatmaker", "Healer", "Herald", "Herbalist", "Hermit", "Historian", "Hunter", "Ice seller", "Innkeeper", "Inventor", "Jailer", "Jester", "Jeweler", "Judge", "Knight", "Lady", "Leatherworker", "Librarian", "Linguist", "Locksmith", "Lord", "Lumberjack", "Mason", "Masseur", "Merchant", "Messenger", "Midwife", "Miller", "Miner", "Minister", "Minstrel", "Monk", "Mortician", "Necromancer", "Noble", "Nun", "Nurse", "Officer", "Painter", "Patissier", "Perfumer", "Philosopher", "Physician", "Pilgrim", "Potter", "Priest", "Privateer", "Professor", "Roofer", "Ropemaker", "Rugmaker", "Saddler", "Sailor", "Scabbard maker", "Sculptor", "Scavenger", "Scholar", "Seamstress", "Servant", "Shaman", "Shepherd", "Ship's captain", "Silversmith", "Slave", "Slaver", "Smith", "Soldier", "Spice Merchant", "Squire", "Stablehand", "Stevedore", "Stonemason", "Steward", "Street seller", "Street sweeper", "Student", "Surgeon", "Surveyor", "Sailor", "Tanner", "Tavernkeeper", "Tax collector", "Teacher", "Thatcher", "Thief", "Torturer", "Town crier", "Toymaker", "Vendor", "Veterinarian", "Vintner", "Weaver", "Wetnurse", "Woodcarver", "Wood seller", "Wrestler", "Writer"],
	trait: ["fidgets", "drinks too much", "eats too much", "swears often", "has poor hygiene", "cannot resist flirting", "cannot stop staring at you", "sweats profusely and easily", "is a habitual liar", "embellishes the truth", "exaggerates details", "has a short temper", "is melodramatic", "gossips about the most mundane things", "cannot resist a juicy secret", "chews with an open mouth", "often sniffs audibly", "is incredibly gullible", "is skeptical of everything", "paces about incessantly", "makes poor eye contact"],
	currentmood: ["annoyed", "scared", "relaxed", "concerned", "bemused", "stressed", "amused", "content", "distracted"],
	idle: ["sitting, with a piece of bread in hand", "sitting, mug in hand", "poring over some map", "reading some letter intently", "reading a book", "shuffling a pack of cards", "chewing on a piece of hay", "sharpening a knife", "buffing a piece of armour", "polishing a shield", "sharpening the blade on a fearsome looking dagger", "cutting an apple into bite sized pieces", "biting into an apple", "eating an apple while looking at some book", "eating a hunk of cheese while reading a book", "sipping out of a huge mug while reading a book"],
	reading: ["a piece of history- my forefather's journal, detailing his life in $town.name when it was just a settlement.", "my journal, from many years ago.", "my mother's journal, from just before she disappeared", "a document which I received by postboy two days ago... I believe it is in code, and somebody is trying to tell me something.", "a traitor's memoirs, extremely rare... I thought it would be a good laugh, but some of what he says is concerningly accurate.", "some sort of spell, though I don't know how to read it.", "a document I bought at the flea market; it looks to be a set of instructions on how to make a golem.", "a book which I bought, believing it to be blank, and suitable for a journal. However, now there's this strange foreign script that I can't read in it.", "a book that I bought as a gift for my mother, who loves beautiful covers, despite not being able to read.", "a supposedly blank book, but every time I open it, different words appear in a strange language."]
}>>


:: Widgets [widget widgets]
<<nobr>><<widget "money">>
<<if Math.floor($args / 100) gte 1 && Math.floor(($args / 10) % 10) gte 1 && Math.floor($args % 10) gte 1>>
		<<print Math.floor($args / 100)>> Gold, <<print Math.floor(($args / 10) % 10)>> Silver, and also <<print Math.floor($args % 10)>> Copper
	<<elseif Math.floor($args / 100) gte 1 && Math.floor(($args / 10) % 10) lt 1 && Math.floor($args % 10) gte 1>>
		<<print Math.floor($args / 100)>> Gold, and <<print Math.floor($args % 10)>> Copper
	<<elseif Math.floor($args / 100) gte 1 && Math.floor(($args / 10) % 10) gte 1 && Math.floor($args % 10) lt 1>>
		<<print Math.floor($args / 100)>> Gold, and <<print Math.floor(($args / 10) % 10)>> Silver
	<<elseif Math.floor($args / 100) gte 1 && Math.floor(($args / 10) % 10) lt 1 && Math.floor($args % 10) lt 1>>
		<<print Math.floor($args / 100)>> Gold
	<<elseif Math.floor($args / 100) lt 1 && Math.floor(($args / 10) % 10) gte 1 && Math.floor($args % 10) gte 1>>
		<<print Math.floor(($args / 10) % 10)>> Silver, and <<print Math.floor($args % 10)>> Copper
	<<elseif Math.floor($args / 100) lt 1 && Math.floor(($args / 10) % 10) gte 1 && Math.floor($args % 10) lt 1>>
		<<print Math.floor(($args / 10) % 10)>> Silver
	<<elseif Math.floor($args / 100) lt 1 && Math.floor(($args / 10) % 10) lt 1&& Math.floor($args % 10) gte 1>>
		<<print Math.floor($args % 10)>> Copper
	<</if>>
<</widget>><</nobr>>


:: MathClamp
math.clamp($tavern.sinroll, 1, 100)
math.clamp($tavern.wealthroll, 1, 100)
math.clamp($tavern.reputationroll, 1, 100)
math.clamp($tavern.cleanlinessroll, 1, 100)
math.clamp($tavern.populationroll, 1, 100)
math.clamp($tavern.roughnessroll, 1, 100)
math.clamp($tavern.diversityroll, 1, 100)
math.clamp($tavern.sizeroll, 1, 100)
math.clamp($tavern.magicroll, 1, 100)

<<if $tavern.sinroll gt 100>>
		<<set $tavern.sinroll to 100>>
	<<elseif $tavern.sinroll lt 1>>
		<<set $tavern.sinroll to 1>>
<</if>>

<<if $tavern.wealthroll gt 100>>
		<<set $tavern.wealthroll to 100>>
	<<elseif $tavern.wealthroll lt 1>>
		<<set $tavern.wealthroll to 1>>
<</if>>

<<if $tavern.reputationroll gt 100>>
		<<set $tavern.reputationroll to 100>>
	<<elseif $tavern.reputationroll lt 1>>
		<<set $tavern.reputationroll to 1>>
<</if>>

<<if $tavern.cleanlinessroll gt 100>>
		<<set $tavern.cleanlinessroll to 100>>
	<<elseif $tavern.cleanlinessroll lt 1>>
		<<set $tavern.cleanlinessroll to 1>>
<</if>>

<<if $tavern.populationroll gt 100>>
		<<set $tavern.populationroll to 100>>
	<<elseif $tavern.populationroll lt 1>>
		<<set $tavern.populationroll to 1>>
<</if>>

<<if $tavern.roughnessroll gt 100>>
		<<set $tavern.roughnessroll to 100>>
	<<elseif $tavern.roughnessroll lt 1>>
		<<set $tavern.roughnessroll to 1>>
<</if>>

<<if $tavern.diversityroll gt 100>>
		<<set $tavern.diversityroll to 100>>
	<<elseif $tavern.diversityroll lt 1>>
		<<set $tavern.diversityroll to 1>>
<</if>>

<<if $tavern.sizeroll gt 100>>
		<<set $tavern.sizeroll to 100>>
	<<elseif $tavern.sizeroll lt 1>>
		<<set $tavern.sizeroll to 1>>
<</if>>

<<if $tavern.magicroll gt 100>>
		<<set $tavern.magicroll to 100>>
	<<elseif $tavern.magicroll lt 1>>
		<<set $tavern.magicroll to 1>>
<</if>>


:: AlchemistInventory
<<set $alchemistinventory to [

	{
	name: "Acid",
	cost: 2500,
	availability: 2
	},
	
	{
	name: "Alchemist's Fire (flask)",
	cost: 5000,
	availability: 3
	},

	{
	name: "Anti-toxin (vial)",
	cost: 5000,
	availability: 1
	},
	
	{
	name: "Bottle, glass",
	cost: 200,
	availability: 1
	},
	
	{
	name: "Component Pouch",
	cost: 2500,
	availability: 2
	},
	
	{
	name: "Flask",
	cost: 2,
	availability: 1
	},
	
	{
	name: "Healer's Kit",
	cost: 500,
	availability: 3
	},
	
	{
	name: "Ink (1 ounce bottle)",
	cost: 1000,
	availability: 4
	},
	
	{
	name: "Jug",
	cost: 2,
	availability: 1
	},
	
	{
	name: "Flask of Oil",
	cost: 10,
	availability: 2
	},
	
	{
	name: "Perfume (vial)",
	cost: 500,
	availability: 4
	},
	
	{
	name: "Poison, Basic",
	cost: 10000,
	availability: 1
	},
	
	{
	name: "Potion of Healing",
	cost: 5000,
	availability: 1
	},
	
	{
	name: "Vial",
	cost: 20,
	availability: 1
	},
	
	{
	name: "Alchemist's Supplies",
	cost: 50000,
	availability: 3
	},

	{
	name: "Brewer's Supplies",
	cost: 2000,
	availability: 1
	},
	
	{
	name: "Cook's Utensils",
	cost: 20,
	availability: 3
	},
	
	{
	name: "Poisoner's Kit",
	cost: 50000,
	availability: 2
	},
	
	{
	name: "Potion (Common)",
	cost: 50000,
	availability: 1
	},
	
	{
	name: "Potion (Uncommon)",
	cost: 250000,
	availability: 1
	},
	
	{
	name: "Potion (Rare)",
	cost: 2500000,
	availability: 3
	}
	
	]>>


:: AlchemistShop
/* %%%%%%%%%%%%%%%%%%%%%%% UNDER CONSTRUCTION %%%%%%%%%%%%%%%%%%%%%%% */
<<if $town.population gt 3000>>
		<<
	<<elseif $town.population gt 1000>>
		<<
	<<elseif $town.population lte 1000>>
		<<
<</if>>

<<set _priceroll to random(1, 100)>>
	<<if _priceroll


:: Guard
<<set $guard to {
	name: eithe



"Regiment", "Guard", "Guardsmen", "Protectors", "Protectorate", "Defenders", "Watch", "Watchers", "Watchmen", "Police", "Peacemen", "Axemen", "Swordsmen", "Pikesmen", "Squad", "Batallion", "Battlesquad", "Fighters"

<<if $town.population gt 3000>>
		<<
	<<elseif $town.population gt 1000>>
		<<
	<<elseif $town.population lte 1000>>
		<<
<</if>>


